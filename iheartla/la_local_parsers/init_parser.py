#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu, leftrec, nomemo
from tatsu.parsing import leftrec, nomemo  # noqa
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class grammarinitBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=re.compile('(?!.*)'),
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(grammarinitBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class grammarinitParser(Parser):
    def __init__(
        self,
        whitespace=re.compile('(?!.*)'),
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=grammarinitBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(grammarinitParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @tatsumasu('Start')
    @nomemo
    def _start_(self):  # noqa

        def block0():

            def block1():
                self._separator_with_space_()
            self._closure(block1)

            def block2():
                self._hspace_()
            self._closure(block2)
            self._valid_block_()
            self.add_last_node_to_name('vblock')

            def block4():
                self._separator_with_space_()
            self._closure(block4)
        self._positive_closure(block0)

        def block5():
            self._blank_()
        self._closure(block5)
        self._check_eof()
        self.ast._define(
            [],
            ['vblock']
        )

    @tatsumasu()
    def _TRACE_(self):  # noqa
        self._pattern('trace')

    @tatsumasu()
    def _TR_(self):  # noqa
        self._pattern('tr')

    @tatsumasu()
    def _VEC_(self):  # noqa
        self._pattern('vec')

    @tatsumasu()
    def _DIAG_(self):  # noqa
        self._pattern('diag')

    @tatsumasu()
    def _INV_(self):  # noqa
        self._pattern('inv')

    @tatsumasu()
    def _DET_(self):  # noqa
        self._pattern('det')

    @tatsumasu()
    def _RANK_(self):  # noqa
        self._pattern('rank')

    @tatsumasu()
    def _NULL_(self):  # noqa
        self._pattern('null')

    @tatsumasu()
    def _ORTH_(self):  # noqa
        self._pattern('orth')

    @tatsumasu()
    def _QR_(self):  # noqa
        self._pattern('qr')

    @tatsumasu()
    def _DERIVATIVE_(self):  # noqa
        self._pattern('ùïï')

    @tatsumasu()
    def _PARTIAL_(self):  # noqa
        self._pattern('‚àÇ')

    @tatsumasu()
    def _WHERE_(self):  # noqa
        self._pattern('where')

    @tatsumasu()
    def _GIVEN_(self):  # noqa
        self._pattern('given')

    @tatsumasu()
    def _SUM_(self):  # noqa
        with self._choice():
            with self._option():
                self._pattern('sum')
            with self._option():
                self._pattern('‚àë')
            self._error('no available options')

    @tatsumasu()
    def _MIN_(self):  # noqa
        self._pattern('min')

    @tatsumasu()
    def _MAX_(self):  # noqa
        self._pattern('max')

    @tatsumasu()
    def _ARGMIN_(self):  # noqa
        self._pattern('argmin')

    @tatsumasu()
    def _ARGMAX_(self):  # noqa
        self._pattern('argmax')

    @tatsumasu()
    def _INT_(self):  # noqa
        self._pattern('int')

    @tatsumasu()
    def _SPARSE_(self):  # noqa
        self._pattern('sparse')

    @tatsumasu()
    def _IF_(self):  # noqa
        self._pattern('if')

    @tatsumasu()
    def _OTHERWISE_(self):  # noqa
        self._pattern('otherwise')

    @tatsumasu()
    def _IN_(self):  # noqa
        self._pattern('‚àà')

    @tatsumasu()
    def _SIN_(self):  # noqa
        self._pattern('sin')

    @tatsumasu()
    def _ASIN_(self):  # noqa
        self._pattern('asin')

    @tatsumasu()
    def _ARCSIN_(self):  # noqa
        self._pattern('arcsin')

    @tatsumasu()
    def _COS_(self):  # noqa
        self._pattern('cos')

    @tatsumasu()
    def _ACOS_(self):  # noqa
        self._pattern('acos')

    @tatsumasu()
    def _ARCCOS_(self):  # noqa
        self._pattern('arccos')

    @tatsumasu()
    def _TAN_(self):  # noqa
        self._pattern('tan')

    @tatsumasu()
    def _ATAN_(self):  # noqa
        self._pattern('atan')

    @tatsumasu()
    def _ARCTAN_(self):  # noqa
        self._pattern('arctan')

    @tatsumasu()
    def _SINH_(self):  # noqa
        self._pattern('sinh')

    @tatsumasu()
    def _ASINH_(self):  # noqa
        self._pattern('asinh')

    @tatsumasu()
    def _ARSINH_(self):  # noqa
        self._pattern('arsinh')

    @tatsumasu()
    def _COSH_(self):  # noqa
        self._pattern('cosh')

    @tatsumasu()
    def _ACOSH_(self):  # noqa
        self._pattern('acosh')

    @tatsumasu()
    def _ARCOSH_(self):  # noqa
        self._pattern('arcosh')

    @tatsumasu()
    def _TANH_(self):  # noqa
        self._pattern('tanh')

    @tatsumasu()
    def _ATANH_(self):  # noqa
        self._pattern('atanh')

    @tatsumasu()
    def _ARTANH_(self):  # noqa
        self._pattern('artanh')

    @tatsumasu()
    def _COT_(self):  # noqa
        self._pattern('cot')

    @tatsumasu()
    def _SEC_(self):  # noqa
        self._pattern('sec')

    @tatsumasu()
    def _CSC_(self):  # noqa
        self._pattern('csc')

    @tatsumasu()
    def _ATAN2_(self):  # noqa
        self._pattern('atan2')

    @tatsumasu()
    def _EXP_(self):  # noqa
        self._pattern('exp')

    @tatsumasu()
    def _LOG_(self):  # noqa
        self._pattern('log')

    @tatsumasu()
    def _LN_(self):  # noqa
        self._pattern('ln')

    @tatsumasu()
    def _SQRT_(self):  # noqa
        self._pattern('sqrt')

    @tatsumasu()
    def _SUBJECT_TO_(self):  # noqa
        with self._choice():
            with self._option():
                self._pattern('s.t.')
            with self._option():
                self._pattern('subject to')
            self._error('no available options')

    @tatsumasu()
    def _FROM_(self):  # noqa
        self._pattern('from')

    @tatsumasu()
    def _PI_(self):  # noqa
        self._pattern('œÄ')

    @tatsumasu()
    def _WITH_(self):  # noqa
        self._pattern('with')

    @tatsumasu()
    def _INITIAL_(self):  # noqa
        self._pattern('initial')

    @tatsumasu()
    def _AND_(self):  # noqa
        self._pattern('and')

    @tatsumasu()
    def _OR_(self):  # noqa
        self._pattern('or')

    @tatsumasu()
    def _DELTA_(self):  # noqa
        self._pattern('[ŒîŒ¥ùõø]')

    @tatsumasu()
    def _NABLA_(self):  # noqa
        self._pattern('‚àá')

    @tatsumasu()
    def _PRIME_(self):  # noqa
        self._pattern("'")

    @tatsumasu()
    def _UDOT_(self):  # noqa
        self._pattern('[\\u0307]')

    @tatsumasu()
    def _UDDOT_(self):  # noqa
        self._pattern('[\\u0308]')

    @tatsumasu()
    def _SOLVE_(self):  # noqa
        with self._choice():
            with self._option():
                self._pattern('solve')
            with self._option():
                self._pattern('Solve')
            with self._option():
                self._pattern('SOLVE')
            self._error('no available options')

    @tatsumasu()
    def _SUBSET_(self):  # noqa
        self._pattern('‚äÇ')

    @tatsumasu()
    def _AS_(self):  # noqa
        self._pattern('as')

    @tatsumasu()
    def _POUND_(self):  # noqa
        self._pattern('#')

    @tatsumasu()
    def _BUILTIN_KEYWORDS_(self):  # noqa
        with self._choice():
            with self._option():
                self._WHERE_()
            with self._option():
                self._GIVEN_()
            with self._option():
                self._SUM_()
            with self._option():
                self._MIN_()
            with self._option():
                self._MAX_()
            with self._option():
                self._ARGMIN_()
            with self._option():
                self._ARGMAX_()
            with self._option():
                self._INT_()
            with self._option():
                self._IF_()
            with self._option():
                self._OTHERWISE_()
            with self._option():
                self._IN_()
            with self._option():
                self._EXP_()
            with self._option():
                self._LOG_()
            with self._option():
                self._LN_()
            with self._option():
                self._SQRT_()
            with self._option():
                self._SUBJECT_TO_()
            with self._option():
                self._FROM_()
            with self._option():
                self._PI_()
            with self._option():
                self._token('|')
            with self._option():
                self._pattern('‚Ñù')
            with self._option():
                self._pattern('‚Ñ§')
            with self._option():
                self._pattern('·µÄ')
            with self._option():
                self._WITH_()
            with self._option():
                self._INITIAL_()
            with self._option():
                self._AND_()
            with self._option():
                self._OR_()
            with self._option():
                self._DELTA_()
            with self._option():
                self._NABLA_()
            with self._option():
                self._DERIVATIVE_()
            with self._option():
                self._PARTIAL_()
            with self._option():
                self._SOLVE_()
            with self._option():
                self._PRIME_()
            with self._option():
                self._SUBSET_()
            with self._option():
                self._AS_()
            with self._option():
                self._POUND_()
            self._error('no available options')

    @tatsumasu('Exponent')
    def _exponent_(self):  # noqa
        self._pattern('[E][+-]?')
        self.name_last_node('exp')

        def block2():
            self._digit_()
        self._positive_closure(block2)
        self.name_last_node('pow')
        self.ast._define(
            ['exp', 'pow'],
            []
        )

    @tatsumasu('Mantissa')
    def _mantissa_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():

                    def block1():
                        self._digit_()
                    self._closure(block1)
                    self.name_last_node('d')
                    self._token('.')

                    def block3():
                        self._digit_()
                    self._positive_closure(block3)
                    self.name_last_node('f')
            with self._option():
                with self._group():

                    def block5():
                        self._digit_()
                    self._positive_closure(block5)
                    self.name_last_node('d')
                    self._token('.')
            self._error('no available options')
        self.ast._define(
            ['d', 'f'],
            []
        )

    @tatsumasu('Float')
    def _floating_point_(self):  # noqa
        self._mantissa_()
        self.name_last_node('m')
        with self._optional():
            self._exponent_()
        self.name_last_node('e')
        self.ast._define(
            ['e', 'm'],
            []
        )

    @tatsumasu('Double')
    def _double_(self):  # noqa
        with self._choice():
            with self._option():
                self._integer_()
                self.name_last_node('i')
                self._exponent_()
                self.name_last_node('exp')
            with self._option():
                self._floating_point_()
                self.name_last_node('f')
            self._error('no available options')
        self.ast._define(
            ['exp', 'f', 'i'],
            []
        )

    @tatsumasu('Fraction')
    def _fraction_(self):  # noqa
        self._pattern('[\\u00BC-\\u00BE\\u2150-\\u215E]')
        self.name_last_node('value')
        self.ast._define(
            ['value'],
            []
        )

    @tatsumasu()
    def _number_(self):  # noqa
        with self._choice():
            with self._option():
                self._double_()
            with self._option():
                self._fraction_()
            with self._option():
                self._integer_()
            self._error('no available options')

    @tatsumasu()
    @nomemo
    def _operations_(self):  # noqa
        with self._choice():
            with self._option():
                self._derivative_()
            with self._option():
                self._partial_()
            with self._option():
                self._divergence_()
            with self._option():
                self._gradient_()
            with self._option():
                self._laplacian_()
            with self._option():
                self._solver_operator_()
            with self._option():
                self._norm_operator_()
            with self._option():
                self._power_operator_()
            with self._option():
                self._inner_product_operator_()
            with self._option():
                self._frobenius_product_operator_()
            with self._option():
                self._hadamard_product_operator_()
            with self._option():
                self._cross_product_operator_()
            with self._option():
                self._kronecker_product_operator_()
            with self._option():
                self._sum_operator_()
            with self._option():
                self._integral_operator_()
            with self._option():
                self._trans_operator_()
            with self._option():
                self._sqrt_operator_()
            with self._option():
                self._function_operator_()
            with self._option():
                self._builtin_operators_()
            with self._option():
                self._pseudoinverse_operator_()
            self._error('no available options')

    @tatsumasu('Add')
    @nomemo
    def _addition_(self):  # noqa
        self._expression_()
        self.name_last_node('left')

        def block1():
            self._hspace_()
        self._closure(block1)
        self._token('+')
        self.name_last_node('op')

        def block3():
            self._hspace_()
        self._closure(block3)
        self._term_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'op', 'right'],
            []
        )

    @tatsumasu('Subtract')
    @nomemo
    def _subtraction_(self):  # noqa
        self._expression_()
        self.name_last_node('left')

        def block1():
            self._hspace_()
        self._closure(block1)
        self._token('-')
        self.name_last_node('op')

        def block3():
            self._hspace_()
        self._closure(block3)
        self._term_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'op', 'right'],
            []
        )

    @tatsumasu('AddSub')
    @nomemo
    def _add_sub_operator_(self):  # noqa
        self._expression_()
        self.name_last_node('left')

        def block1():
            self._hspace_()
        self._closure(block1)
        with self._group():
            with self._choice():
                with self._option():
                    self._token('+-')
                with self._option():
                    self._token('¬±')
                self._error('no available options')
        self.name_last_node('op')

        def block4():
            self._hspace_()
        self._closure(block4)
        self._term_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'op', 'right'],
            []
        )

    @tatsumasu('Multiply')
    @nomemo
    def _multiplication_(self):  # noqa
        with self._choice():
            with self._option():
                self._term_()
                self.name_last_node('left')

                def block1():
                    self._hspace_()
                self._closure(block1)
                self._token('‚ãÖ')
                self.name_last_node('op')

                def block3():
                    self._hspace_()
                self._closure(block3)
                self._factor_()
                self.name_last_node('right')
            with self._option():
                self._term_()
                self.name_last_node('left')

                def block6():
                    self._hspace_()
                self._closure(block6)
                self._factor_()
                self.name_last_node('right')
            self._error('no available options')
        self.ast._define(
            ['left', 'op', 'right'],
            []
        )

    @tatsumasu('Divide')
    @nomemo
    def _division_(self):  # noqa
        self._term_()
        self.name_last_node('left')

        def block1():
            self._hspace_()
        self._closure(block1)
        with self._group():
            with self._choice():
                with self._option():
                    self._token('/')
                with self._option():
                    self._token('√∑')
                self._error('no available options')
        self.name_last_node('op')

        def block4():
            self._hspace_()
        self._closure(block4)
        self._factor_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'op', 'right'],
            []
        )

    @tatsumasu('Derivative')
    def _derivative_(self):  # noqa
        with self._choice():
            with self._option():
                self._DERIVATIVE_()
                with self._optional():
                    with self._choice():
                        with self._option():
                            self._sup_integer_()
                            self.name_last_node('uorder')
                        with self._option():
                            self._token('^')
                            with self._group():
                                with self._choice():
                                    with self._option():
                                        self._identifier_()
                                    with self._option():
                                        self._number_()
                                    self._error('no available options')
                            self.name_last_node('uorder')
                        self._error('no available options')
                self._factor_()
                self.name_last_node('upper')
                self._token('/')
                self.name_last_node('f')
                self._DERIVATIVE_()
                self._identifier_()
                self.name_last_node('lower')
                with self._optional():
                    with self._choice():
                        with self._option():
                            self._sup_integer_()
                            self.name_last_node('lorder')
                        with self._option():
                            self._token('^')
                            with self._group():
                                with self._choice():
                                    with self._option():
                                        self._identifier_()
                                    with self._option():
                                        self._number_()
                                    self._error('no available options')
                            self.name_last_node('lorder')
                        self._error('no available options')
            with self._option():
                self._DERIVATIVE_()
                with self._optional():
                    with self._choice():
                        with self._option():
                            self._sup_integer_()
                            self.name_last_node('uorder')
                        with self._option():
                            self._token('^')
                            with self._group():
                                with self._choice():
                                    with self._option():
                                        self._identifier_()
                                    with self._option():
                                        self._number_()
                                    self._error('no available options')
                            self.name_last_node('uorder')
                        self._error('no available options')
                self._token('/')
                self.name_last_node('s')
                self._DERIVATIVE_()
                self._identifier_()
                self.name_last_node('lower')
                with self._optional():
                    with self._choice():
                        with self._option():
                            self._sup_integer_()
                            self.name_last_node('lorder')
                        with self._option():
                            self._token('^')
                            with self._group():
                                with self._choice():
                                    with self._option():
                                        self._identifier_()
                                    with self._option():
                                        self._number_()
                                    self._error('no available options')
                            self.name_last_node('lorder')
                        self._error('no available options')

                def block21():
                    self._hspace_()
                self._positive_closure(block21)
                self._factor_()
                self.name_last_node('upper')
            self._error('no available options')
        self.ast._define(
            ['f', 'lorder', 'lower', 's', 'uorder', 'upper'],
            []
        )

    @tatsumasu('Partial')
    def _partial_(self):  # noqa
        with self._choice():
            with self._option():
                self._PARTIAL_()
                with self._optional():
                    with self._choice():
                        with self._option():
                            self._sup_integer_()
                            self.name_last_node('uorder')
                        with self._option():
                            self._token('^')
                            with self._group():
                                with self._choice():
                                    with self._option():
                                        self._identifier_()
                                    with self._option():
                                        self._number_()
                                    self._error('no available options')
                            self.name_last_node('uorder')
                        self._error('no available options')
                self._factor_()
                self.name_last_node('upper')
                self._token('/')
                self.name_last_node('f')

                def block7():
                    self._PARTIAL_()
                    self._identifier_()
                    self.add_last_node_to_name('lower')
                    with self._optional():
                        with self._choice():
                            with self._option():
                                self._sup_integer_()
                                self.add_last_node_to_name('lorder')
                            with self._option():
                                self._token('^')
                                with self._group():
                                    with self._choice():
                                        with self._option():
                                            self._identifier_()
                                        with self._option():
                                            self._number_()
                                        self._error('no available options')
                                self.add_last_node_to_name('lorder')
                            self._error('no available options')
                self._positive_closure(block7)
                self.name_last_node('l')
            with self._option():
                self._PARTIAL_()
                with self._optional():
                    with self._choice():
                        with self._option():
                            self._sup_integer_()
                            self.name_last_node('uorder')
                        with self._option():
                            self._token('^')
                            with self._group():
                                with self._choice():
                                    with self._option():
                                        self._identifier_()
                                    with self._option():
                                        self._number_()
                                    self._error('no available options')
                            self.name_last_node('uorder')
                        self._error('no available options')
                self._token('/')
                self.name_last_node('s')

                def block19():
                    self._PARTIAL_()
                    self._identifier_()
                    self.add_last_node_to_name('lower')
                    with self._optional():
                        with self._choice():
                            with self._option():
                                self._sup_integer_()
                                self.add_last_node_to_name('lorder')
                            with self._option():
                                self._token('^')
                                with self._group():
                                    with self._choice():
                                        with self._option():
                                            self._identifier_()
                                        with self._option():
                                            self._number_()
                                        self._error('no available options')
                                self.add_last_node_to_name('lorder')
                            self._error('no available options')
                self._positive_closure(block19)
                self.name_last_node('l')

                def block25():
                    self._hspace_()
                self._positive_closure(block25)
                self._factor_()
                self.name_last_node('upper')
            self._error('no available options')
        self.ast._define(
            ['f', 'l', 's', 'uorder', 'upper'],
            ['lorder', 'lower']
        )

    @tatsumasu('Divergence')
    def _divergence_(self):  # noqa
        self._NABLA_()
        self.name_last_node('name')

        def block1():
            self._hspace_()
        self._closure(block1)
        self._token('‚ãÖ')

        def block2():
            self._hspace_()
        self._closure(block2)
        self._factor_()
        self.name_last_node('value')
        self.ast._define(
            ['name', 'value'],
            []
        )

    @tatsumasu('Gradient')
    def _gradient_(self):  # noqa
        self._NABLA_()
        self.name_last_node('name')

        def block1():
            self._hspace_()
        self._closure(block1)
        self._factor_()
        self.name_last_node('value')
        self.ast._define(
            ['name', 'value'],
            []
        )

    @tatsumasu('Laplace')
    def _laplacian_(self):  # noqa
        self._DELTA_()
        self.name_last_node('name')

        def block1():
            self._hspace_()
        self._closure(block1)
        self._factor_()
        self.name_last_node('value')
        self.ast._define(
            ['name', 'value'],
            []
        )

    @tatsumasu('Power')
    @nomemo
    def _power_operator_(self):  # noqa
        with self._choice():
            with self._option():
                self._factor_()
                self.name_last_node('base')
                self._token('^T')
                self.name_last_node('t')
            with self._option():
                self._factor_()
                self.name_last_node('base')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('^(-1)')
                        with self._option():
                            self._token('‚Åª¬π')
                        self._error('no available options')
                self.name_last_node('r')
            with self._option():
                self._factor_()
                self.name_last_node('base')
                self._token('^')
                self._factor_()
                self.name_last_node('power')
            with self._option():
                self._factor_()
                self.name_last_node('base')
                self._sup_integer_()
                self.name_last_node('power')
            self._error('no available options')
        self.ast._define(
            ['base', 'power', 'r', 't'],
            []
        )

    @tatsumasu('Solver')
    @nomemo
    def _solver_operator_(self):  # noqa
        with self._choice():
            with self._option():
                self._factor_()
                self.name_last_node('left')

                def block1():
                    self._hspace_()
                self._closure(block1)
                self._token('\\')

                def block2():
                    self._hspace_()
                self._closure(block2)
                self._factor_()
                self.name_last_node('right')
            with self._option():
                self._factor_()
                self.name_last_node('left')

                def block5():
                    self._hspace_()
                self._closure(block5)
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('^(-1)')
                        with self._option():
                            self._token('‚Åª¬π')
                        self._error('no available options')
                self.name_last_node('p')

                def block8():
                    self._hspace_()
                self._closure(block8)
                self._factor_()
                self.name_last_node('right')
            self._error('no available options')
        self.ast._define(
            ['left', 'p', 'right'],
            []
        )

    @tatsumasu('Summation')
    def _sum_operator_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._SUM_()
                    self._token('_')
                    self._identifier_alone_()
                    self.name_last_node('sub')

                    def block1():
                        self._hspace_()
                    self._positive_closure(block1)
                    self._term_()
                    self.name_last_node('exp')
                with self._option():
                    self._SUM_()
                    self._token('_')
                    self._identifier_alone_()
                    self.name_last_node('sub')
                    with self._if():
                        self._token('(')

                    def block4():
                        self._hspace_()
                    self._closure(block4)
                    self._term_()
                    self.name_last_node('exp')
                with self._option():
                    self._SUM_()
                    self._token('_(')

                    def block6():
                        self._hspace_()
                    self._closure(block6)
                    self._identifier_alone_()
                    self.name_last_node('id')

                    def block8():
                        self._hspace_()
                    self._closure(block8)
                    self._token('for')

                    def block9():
                        self._hspace_()
                    self._closure(block9)
                    self._if_condition_()
                    self.name_last_node('cond')

                    def block11():
                        self._hspace_()
                    self._closure(block11)
                    self._token(')')

                    def block12():
                        self._hspace_()
                    self._positive_closure(block12)
                    self._term_()
                    self.name_last_node('exp')
                with self._option():
                    self._SUM_()
                    self._token('_(')

                    def block14():
                        self._hspace_()
                    self._closure(block14)
                    self._identifier_alone_()
                    self.add_last_node_to_name('enum')

                    def block16():

                        def block17():
                            self._hspace_()
                        self._closure(block17)

                        def block18():
                            self._token(',')
                        self._closure(block18)

                        def block19():
                            self._hspace_()
                        self._closure(block19)
                        self._identifier_alone_()
                        self.add_last_node_to_name('enum')
                    self._closure(block16)

                    def block21():
                        self._hspace_()
                    self._closure(block21)
                    self._IN_()

                    def block22():
                        self._hspace_()
                    self._closure(block22)
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._function_operator_()
                            with self._option():
                                self._builtin_operators_()
                            with self._option():
                                self._identifier_alone_()
                            self._error('no available options')
                    self.name_last_node('range')

                    def block25():
                        self._hspace_()
                    self._closure(block25)
                    self._token(')')

                    def block26():
                        self._hspace_()
                    self._positive_closure(block26)
                    self._term_()
                    self.name_last_node('exp')
                self._error('no available options')

        def block29():
            with self._optional():

                def block30():
                    self._hspace_()
                self._closure(block30)
                self._line_()

            def block31():
                self._hspace_()
            self._closure(block31)
            with self._group():
                with self._choice():
                    with self._option():
                        self._WHERE_()
                    with self._option():
                        self._WITH_()
                    self._error('no available options')

            def block33():
                self._hspace_()
            self._closure(block33)
            self._general_assignment_()
            self.add_last_node_to_name('extra')

            def block35():

                def block36():
                    self._hspace_()
                self._closure(block36)
                self._token(';')

                def block37():
                    self._hspace_()
                self._closure(block37)
                self._general_assignment_()
                self.add_last_node_to_name('extra')
            self._closure(block35)
        self._closure(block29)
        self.ast._define(
            ['cond', 'exp', 'id', 'range', 'sub'],
            ['enum', 'extra']
        )

    @tatsumasu('Optimize')
    def _optimize_operator_(self):  # noqa

        def block0():
            self._token('with')

            def block1():
                self._hspace_()
            self._closure(block1)
            self._token('initial')

            def block2():
                self._hspace_()
            self._closure(block2)
            self._statement_()
            self.add_last_node_to_name('init')

            def block4():

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._token(';')

                def block6():
                    self._hspace_()
                self._closure(block6)
                self._statement_()
                self.add_last_node_to_name('init')
            self._closure(block4)

            def block8():
                self._hspace_()
            self._closure(block8)
            self._token('\n')
        self._closure(block0)
        with self._group():
            with self._choice():
                with self._option():
                    self._MIN_()
                    self.name_last_node('min')
                with self._option():
                    self._MAX_()
                    self.name_last_node('max')
                with self._option():
                    self._ARGMIN_()
                    self.name_last_node('amin')
                with self._option():
                    self._ARGMAX_()
                    self.name_last_node('amax')
                self._error('no available options')
        self._token('_(')

        def block14():
            self._hspace_()
        self._closure(block14)
        self._where_condition_terse_()
        self.add_last_node_to_name('defs')

        def block16():

            def block17():
                self._hspace_()
            self._closure(block17)
            self._token(',')

            def block18():
                self._hspace_()
            self._closure(block18)
            self._where_condition_terse_()
            self.add_last_node_to_name('defs')
        self._closure(block16)

        def block20():
            self._hspace_()
        self._closure(block20)
        self._token(')')

        def block21():
            self._hspace_()
        self._closure(block21)
        self._expression_()
        self.name_last_node('exp')

        def block23():

            def block24():

                def block25():
                    self._hspace_()
                self._closure(block25)

                def block26():
                    self._separator_()
                self._closure(block26)

                def block27():
                    self._hspace_()
                self._closure(block27)
            self._closure(block24)
            self._SUBJECT_TO_()

            def block28():

                def block29():
                    self._hspace_()
                self._closure(block29)

                def block30():
                    self._separator_()
                self._closure(block30)

                def block31():
                    self._hspace_()
                self._closure(block31)
            self._closure(block28)
            self._multi_cond_()
            self.name_last_node('cond')
        self._closure(block23)
        self.ast._define(
            ['amax', 'amin', 'cond', 'exp', 'max', 'min'],
            ['defs', 'init']
        )

    @tatsumasu('MultiCond')
    @leftrec
    def _multi_cond_(self):  # noqa
        with self._choice():
            with self._option():

                def block0():
                    self._hspace_()
                self._closure(block0)
                self._multi_cond_()
                self.name_last_node('m_cond')
                self._separator_with_space_()
                self._atom_condition_()
                self.name_last_node('cond')

                def block3():
                    self._hspace_()
                self._closure(block3)
            with self._option():

                def block4():
                    self._hspace_()
                self._closure(block4)
                self._atom_condition_()
                self.name_last_node('cond')

                def block6():
                    self._hspace_()
                self._closure(block6)
            self._error('no available options')
        self.ast._define(
            ['cond', 'm_cond'],
            []
        )

    @tatsumasu('Integral')
    def _integral_operator_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._INT_()
                with self._option():
                    self._token('‚à´')
                self._error('no available options')
        self._token('_')
        with self._group():
            with self._choice():
                with self._option():
                    self._domain_()
                    self.name_last_node('d')
                with self._option():
                    with self._group():
                        self._sub_factor_()
                        self.name_last_node('lower')

                        def block3():
                            self._hspace_()
                        self._closure(block3)
                        self._token('^')

                        def block4():
                            self._hspace_()
                        self._closure(block4)
                        self._sub_factor_()
                        self.name_last_node('upper')
                self._error('no available options')

        def block7():
            self._hspace_()
        self._closure(block7)
        self._expression_()
        self.name_last_node('exp')

        def block9():
            self._hspace_()
        self._closure(block9)
        self._PARTIAL_()
        self._identifier_alone_()
        self.name_last_node('id')
        self.ast._define(
            ['d', 'exp', 'id', 'lower', 'upper'],
            []
        )

    @tatsumasu('Domain')
    def _domain_(self):  # noqa
        self._token('[')

        def block0():
            self._hspace_()
        self._closure(block0)
        self._expression_()
        self.name_last_node('lower')

        def block2():
            self._hspace_()
        self._closure(block2)
        self._token(',')

        def block3():
            self._hspace_()
        self._closure(block3)
        self._expression_()
        self.name_last_node('upper')
        self._token(']')
        self.ast._define(
            ['lower', 'upper'],
            []
        )

    @tatsumasu('Norm')
    def _norm_operator_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('||')
                    self.name_last_node('double')

                    def block1():
                        self._hspace_()
                    self._closure(block1)
                    self._expression_()
                    self.name_last_node('value')

                    def block3():
                        self._hspace_()
                    self._closure(block3)
                    self._token('||')
                with self._option():
                    self._token('‚Äñ')
                    self.name_last_node('double')

                    def block5():
                        self._hspace_()
                    self._closure(block5)
                    self._expression_()
                    self.name_last_node('value')

                    def block7():
                        self._hspace_()
                    self._closure(block7)
                    self._token('‚Äñ')
                with self._option():
                    self._token('|')
                    self.name_last_node('single')

                    def block9():
                        self._hspace_()
                    self._closure(block9)
                    self._expression_()
                    self.name_last_node('value')

                    def block11():
                        self._hspace_()
                    self._closure(block11)
                    self._token('|')
                self._error('no available options')
        with self._optional():
            with self._choice():
                with self._option():
                    with self._group():
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._token('_')
                                    with self._group():
                                        with self._choice():
                                            with self._option():
                                                self._integer_()
                                            with self._option():
                                                self._token('*')
                                            with self._option():
                                                self._token('‚àû')
                                            with self._option():
                                                self._identifier_alone_()
                                            self._error('no available options')
                                    self.name_last_node('sub')
                                with self._option():
                                    self._sub_integer_()
                                    self.name_last_node('sub')
                                self._error('no available options')
                        with self._optional():
                            with self._choice():
                                with self._option():
                                    self._token('^')
                                    self._factor_()
                                    self.name_last_node('power')
                                with self._option():
                                    self._sup_integer_()
                                    self.name_last_node('power')
                                self._error('no available options')
                with self._option():
                    with self._group():
                        self._token('_(')
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._integer_()
                                with self._option():
                                    self._token('*')
                                with self._option():
                                    self._token('‚àû')
                                with self._option():
                                    self._identifier_()
                                self._error('no available options')
                        self.name_last_node('sub')
                        self._token(')')
                        with self._optional():
                            with self._choice():
                                with self._option():
                                    self._token('^')
                                    self._factor_()
                                    self.name_last_node('power')
                                with self._option():
                                    self._sup_integer_()
                                    self.name_last_node('power')
                                self._error('no available options')
                with self._option():
                    with self._group():
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._token('^')
                                    self._factor_()
                                    self.name_last_node('power')
                                with self._option():
                                    self._sup_integer_()
                                    self.name_last_node('power')
                                self._error('no available options')
                        with self._optional():
                            with self._choice():
                                with self._option():
                                    self._token('_')
                                    with self._group():
                                        with self._choice():
                                            with self._option():
                                                self._integer_()
                                            with self._option():
                                                self._token('*')
                                            with self._option():
                                                self._token('‚àû')
                                            with self._option():
                                                self._identifier_alone_()
                                            self._error('no available options')
                                    self.name_last_node('sub')
                                with self._option():
                                    self._sub_integer_()
                                    self.name_last_node('sub')
                                self._error('no available options')
                self._error('no available options')
        self.ast._define(
            ['double', 'power', 'single', 'sub', 'value'],
            []
        )

    @tatsumasu('InnerProduct')
    def _inner_product_operator_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('<')

                        def block0():
                            self._hspace_()
                        self._closure(block0)
                        self._expression_()
                        self.name_last_node('left')

                        def block2():
                            self._hspace_()
                        self._closure(block2)
                        self._token(',')

                        def block3():
                            self._hspace_()
                        self._closure(block3)
                        self._expression_()
                        self.name_last_node('right')

                        def block5():
                            self._hspace_()
                        self._closure(block5)
                        self._token('>')
                with self._option():
                    with self._group():
                        self._token('‚ü®')

                        def block6():
                            self._hspace_()
                        self._closure(block6)
                        self._expression_()
                        self.name_last_node('left')

                        def block8():
                            self._hspace_()
                        self._closure(block8)
                        self._token(',')

                        def block9():
                            self._hspace_()
                        self._closure(block9)
                        self._expression_()
                        self.name_last_node('right')

                        def block11():
                            self._hspace_()
                        self._closure(block11)
                        self._token('‚ü©')
                self._error('no available options')

        def block13():
            self._token('_')
            self._identifier_()
            self.name_last_node('sub')
        self._closure(block13)
        self.ast._define(
            ['left', 'right', 'sub'],
            []
        )

    @tatsumasu('FroProduct')
    @nomemo
    def _frobenius_product_operator_(self):  # noqa
        self._factor_()
        self.name_last_node('left')

        def block1():
            self._hspace_()
        self._closure(block1)
        self._token(':')

        def block2():
            self._hspace_()
        self._closure(block2)
        self._factor_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'right'],
            []
        )

    @tatsumasu('HadamardProduct')
    @nomemo
    def _hadamard_product_operator_(self):  # noqa
        self._factor_()
        self.name_last_node('left')

        def block1():
            self._hspace_()
        self._closure(block1)
        self._token('‚àò')

        def block2():
            self._hspace_()
        self._closure(block2)
        self._factor_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'right'],
            []
        )

    @tatsumasu('CrossProduct')
    @nomemo
    def _cross_product_operator_(self):  # noqa
        self._factor_()
        self.name_last_node('left')

        def block1():
            self._hspace_()
        self._closure(block1)
        self._token('√ó')

        def block2():
            self._hspace_()
        self._closure(block2)
        self._factor_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'right'],
            []
        )

    @tatsumasu('KroneckerProduct')
    @nomemo
    def _kronecker_product_operator_(self):  # noqa
        self._factor_()
        self.name_last_node('left')

        def block1():
            self._hspace_()
        self._closure(block1)
        self._token('‚äó')

        def block2():
            self._hspace_()
        self._closure(block2)
        self._factor_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'right'],
            []
        )

    @tatsumasu('Transpose')
    @nomemo
    def _trans_operator_(self):  # noqa
        self._factor_()
        self.name_last_node('f')
        self._pattern('·µÄ')
        self.ast._define(
            ['f'],
            []
        )

    @tatsumasu('PseudoInverse')
    @nomemo
    def _pseudoinverse_operator_(self):  # noqa
        self._factor_()
        self.name_last_node('f')
        self._pattern('‚Å∫')
        self.ast._define(
            ['f'],
            []
        )

    @tatsumasu('Squareroot')
    def _sqrt_operator_(self):  # noqa
        self._pattern('‚àö')
        self._factor_()
        self.name_last_node('f')
        self.ast._define(
            ['f'],
            []
        )

    @tatsumasu()
    def _predefined_built_operators_(self):  # noqa
        with self._choice():
            with self._option():
                self._exp_func_()
            with self._option():
                self._log_func_()
            with self._option():
                self._ln_func_()
            with self._option():
                self._sqrt_func_()
            self._error('no available options')

    @tatsumasu('ExpFunc')
    def _exp_func_(self):  # noqa
        self._EXP_()
        self._token('(')

        def block0():
            self._hspace_()
        self._closure(block0)
        self._expression_()
        self.name_last_node('param')

        def block2():
            self._hspace_()
        self._closure(block2)
        self._token(')')
        self.ast._define(
            ['param'],
            []
        )

    @tatsumasu('LogFunc')
    def _log_func_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._pattern('log[\\u2082]')
                                self.name_last_node('f')
                            with self._option():
                                self._pattern('log[\\u2081][\\u2080]')
                                self.name_last_node('s')
                            self._error('no available options')
                    self._token('(')

                    def block3():
                        self._hspace_()
                    self._closure(block3)
                    self._expression_()
                    self.name_last_node('param')

                    def block5():
                        self._hspace_()
                    self._closure(block5)
                    self._token(')')
            with self._option():
                with self._group():
                    self._LOG_()
                    with self._optional():
                        with self._choice():
                            with self._option():
                                self._token('_2')
                                self.name_last_node('f')
                            with self._option():
                                self._token('_10')
                                self.name_last_node('s')
                            self._error('no available options')
                    self._token('(')

                    def block9():
                        self._hspace_()
                    self._closure(block9)
                    self._expression_()
                    self.name_last_node('param')

                    def block11():
                        self._hspace_()
                    self._closure(block11)
                    self._token(')')
            self._error('no available options')
        self.ast._define(
            ['f', 'param', 's'],
            []
        )

    @tatsumasu('LnFunc')
    def _ln_func_(self):  # noqa
        self._LN_()
        self._token('(')

        def block0():
            self._hspace_()
        self._closure(block0)
        self._expression_()
        self.name_last_node('param')

        def block2():
            self._hspace_()
        self._closure(block2)
        self._token(')')
        self.ast._define(
            ['param'],
            []
        )

    @tatsumasu('SqrtFunc')
    def _sqrt_func_(self):  # noqa
        self._SQRT_()
        self._token('(')

        def block0():
            self._hspace_()
        self._closure(block0)
        self._expression_()
        self.name_last_node('param')

        def block2():
            self._hspace_()
        self._closure(block2)
        self._token(')')
        self.ast._define(
            ['param'],
            []
        )

    @tatsumasu('Matrix')
    def _matrix_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('[')

                def block0():
                    self._hspace_()
                self._closure(block0)
                self._rows_()
                self.name_last_node('value')

                def block2():
                    self._hspace_()
                self._closure(block2)
                self._token(']')
            with self._option():
                self._token('‚é°')

                def block3():
                    self._hspace_()
                self._closure(block3)
                self._rows_()
                self.name_last_node('value')

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._token('‚é¶')
            self._error('no available options')
        self.ast._define(
            ['value'],
            []
        )

    @tatsumasu('Vector')
    def _vector_(self):  # noqa
        self._token('(')

        def block0():
            self._hspace_()
        self._closure(block0)
        self._expression_()
        self.add_last_node_to_name('exp')

        def block2():

            def block3():
                self._hspace_()
            self._closure(block3)
            self._token(',')

            def block4():
                self._hspace_()
            self._closure(block4)
            self._expression_()
            self.add_last_node_to_name('exp')
        self._positive_closure(block2)

        def block6():
            self._hspace_()
        self._closure(block6)
        self._token(')')
        self.ast._define(
            [],
            ['exp']
        )

    @tatsumasu('Set')
    def _set_(self):  # noqa
        self._token('{')

        def block0():
            self._hspace_()
        self._closure(block0)
        self._expression_()
        self.add_last_node_to_name('exp')

        def block2():

            def block3():
                self._hspace_()
            self._closure(block3)
            self._token(',')

            def block4():
                self._hspace_()
            self._closure(block4)
            self._expression_()
            self.add_last_node_to_name('exp')
        self._positive_closure(block2)

        def block6():
            self._hspace_()
        self._closure(block6)
        self._token('}')
        self.ast._define(
            [],
            ['exp']
        )

    @tatsumasu('MultiCondExpr')
    def _multi_cond_expr_(self):  # noqa
        self._token('{')

        def block0():
            self._hspace_()
        self._closure(block0)
        self._multi_if_conditions_()
        self.name_last_node('ifs')
        with self._optional():

            def block2():
                self._separator_with_space_()
            self._positive_closure(block2)

            def block3():
                self._hspace_()
            self._closure(block3)
            self._expression_()
            self.name_last_node('other')

            def block5():
                self._hspace_()
            self._closure(block5)
            self._OTHERWISE_()
        self.ast._define(
            ['ifs', 'other'],
            []
        )

    @tatsumasu('MultiIfs')
    @leftrec
    def _multi_if_conditions_(self):  # noqa
        with self._choice():
            with self._option():
                self._multi_if_conditions_()
                self.name_last_node('ifs')

                def block1():
                    self._separator_with_space_()
                self._positive_closure(block1)
                self._single_if_condition_()
                self.name_last_node('value')
            with self._option():
                self._single_if_condition_()
                self.name_last_node('value')
            self._error('no available options')
        self.ast._define(
            ['ifs', 'value'],
            []
        )

    @tatsumasu('SingleIf')
    @nomemo
    def _single_if_condition_(self):  # noqa
        with self._choice():
            with self._option():
                self._expression_()
                self.name_last_node('stat')

                def block1():
                    self._hspace_()
                self._closure(block1)
                self._IF_()

                def block2():
                    self._hspace_()
                self._closure(block2)
                self._if_condition_()
                self.name_last_node('cond')
            with self._option():
                self._if_condition_()
                self.name_last_node('cond')

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._token(':')

                def block6():
                    self._hspace_()
                self._closure(block6)
                self._expression_()
                self.name_last_node('stat')
            self._error('no available options')
        self.ast._define(
            ['cond', 'stat'],
            []
        )

    @tatsumasu('MatrixRows')
    @leftrec
    def _rows_(self):  # noqa
        with self._choice():
            with self._option():
                self._rows_()
                self.name_last_node('rs')

                def block1():
                    self._separator_with_space_()
                self._positive_closure(block1)
                self._row_()
                self.name_last_node('r')

                def block3():
                    self._hspace_()
                self._closure(block3)
            with self._option():
                self._rows_()
                self.name_last_node('rs')

                def block5():
                    self._separator_with_space_()
                self._positive_closure(block5)
            with self._option():
                self._row_()
                self.name_last_node('r')

                def block7():
                    self._hspace_()
                self._closure(block7)
            self._error('no available options')
        self.ast._define(
            ['r', 'rs'],
            []
        )

    @tatsumasu('MatrixRow')
    @nomemo
    def _row_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('|')

                def block0():
                    self._hspace_()
                self._closure(block0)
                self._row_()
                self.add_last_node_to_name('value')

                def block2():
                    self._hspace_()
                self._closure(block2)
                self._token('|')
            with self._option():
                self._row_with_commas_()
                self.name_last_node('rc')

                def block4():
                    self._hspace_()
                self._closure(block4)
                self._expr_in_matrix_()
                self.name_last_node('exp')
            with self._option():
                self._row_with_commas_()
                self.name_last_node('rc')
            with self._option():
                self._expr_in_matrix_()
                self.name_last_node('exp')
            self._error('no available options')
        self.ast._define(
            ['exp', 'rc'],
            ['value']
        )

    @tatsumasu('MatrixRowCommas')
    @leftrec
    def _row_with_commas_(self):  # noqa
        with self._choice():
            with self._option():
                self._row_with_commas_()
                self.name_last_node('value')

                def block1():
                    self._hspace_()
                self._closure(block1)
                self._expr_in_matrix_()
                self.name_last_node('exp')
                with self._group():
                    with self._choice():
                        with self._option():

                            def block3():
                                self._hspace_()
                            self._closure(block3)
                            self._token(',')
                        with self._option():

                            def block4():
                                self._hspace_()
                            self._positive_closure(block4)
                        self._error('no available options')
            with self._option():

                def block6():
                    self._hspace_()
                self._closure(block6)
                self._expr_in_matrix_()
                self.name_last_node('exp')
                with self._group():
                    with self._choice():
                        with self._option():

                            def block8():
                                self._hspace_()
                            self._closure(block8)
                            self._token(',')
                        with self._option():

                            def block9():
                                self._hspace_()
                            self._positive_closure(block9)
                        self._error('no available options')
            self._error('no available options')
        self.ast._define(
            ['exp', 'value'],
            []
        )

    @tatsumasu('ExpInMatrix')
    @leftrec
    def _expr_in_matrix_(self):  # noqa
        with self._choice():
            with self._option():
                self._addition_in_matrix_()
                self.name_last_node('value')
            with self._option():
                self._subtraction_in_matrix_()
                self.name_last_node('value')
            with self._option():
                with self._optional():
                    self._token('-')
                self.name_last_node('sign')
                self._term_in_matrix_()
                self.name_last_node('value')
            self._error('no available options')
        self.ast._define(
            ['sign', 'value'],
            []
        )

    @tatsumasu('Add')
    @nomemo
    def _addition_in_matrix_(self):  # noqa
        self._expr_in_matrix_()
        self.name_last_node('left')
        self._token('+')
        self.name_last_node('op')
        self._term_in_matrix_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'op', 'right'],
            []
        )

    @tatsumasu('Subtract')
    @nomemo
    def _subtraction_in_matrix_(self):  # noqa
        self._expr_in_matrix_()
        self.name_last_node('left')
        self._token('-')
        self.name_last_node('op')
        self._term_in_matrix_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'op', 'right'],
            []
        )

    @tatsumasu()
    @leftrec
    def _term_in_matrix_(self):  # noqa
        with self._choice():
            with self._option():
                self._multiplication_in_matrix_()
            with self._option():
                self._division_in_matrix_()
            with self._option():
                self._factor_in_matrix_()
            self._error('no available options')

    @tatsumasu('Multiply')
    @nomemo
    def _multiplication_in_matrix_(self):  # noqa
        with self._choice():
            with self._option():
                self._term_in_matrix_()
                self.name_last_node('left')
                self._token('‚ãÖ')
                self.name_last_node('op')
                self._factor_in_matrix_()
                self.name_last_node('right')
            with self._option():
                self._term_in_matrix_()
                self.name_last_node('left')
                self._factor_in_matrix_()
                self.name_last_node('right')
            self._error('no available options')
        self.ast._define(
            ['left', 'op', 'right'],
            []
        )

    @tatsumasu('Divide')
    @nomemo
    def _division_in_matrix_(self):  # noqa
        self._term_in_matrix_()
        self.name_last_node('left')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('/')
                with self._option():
                    self._token('√∑')
                self._error('no available options')
        self.name_last_node('op')
        self._factor_in_matrix_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'op', 'right'],
            []
        )

    @tatsumasu('NumMatrix')
    def _number_matrix_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('0')
                        with self._option():
                            self._token('1')
                        with self._option():
                            self._token('ùüô')
                        self._error('no available options')
                self.name_last_node('left')
                self._token('_')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._integer_()
                        with self._option():
                            self._identifier_()
                        self._error('no available options')
                self.name_last_node('id1')

                def block4():
                    self._token(',')
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._integer_()
                            with self._option():
                                self._identifier_()
                            self._error('no available options')
                    self.name_last_node('id2')
                self._closure(block4)
            with self._option():
                self._pattern('[01\\u1D7D9]')
                self.name_last_node('left')
                self._sub_integer_()
                self.name_last_node('id1')

                def block9():
                    self._token(',')
                    self._sub_integer_()
                    self.name_last_node('id2')
                self._closure(block9)
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('0')
                        with self._option():
                            self._token('1')
                        with self._option():
                            self._token('ùüô')
                        self._error('no available options')
                self.name_last_node('left')
                self._token('_')
                self._token('(')

                def block13():
                    self._hspace_()
                self._closure(block13)
                with self._group():
                    with self._choice():
                        with self._option():
                            self._integer_()
                        with self._option():
                            self._identifier_()
                        self._error('no available options')
                self.name_last_node('id1')

                def block16():

                    def block17():
                        self._hspace_()
                    self._closure(block17)
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._token(',')
                            with self._option():
                                self._token('√ó')
                            self._error('no available options')

                    def block19():
                        self._hspace_()
                    self._closure(block19)
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._integer_()
                            with self._option():
                                self._identifier_()
                            self._error('no available options')
                    self.name_last_node('id2')
                self._closure(block16)

                def block22():
                    self._hspace_()
                self._closure(block22)
                self._token(')')
            self._error('no available options')
        self.ast._define(
            ['id1', 'id2', 'left'],
            []
        )

    @tatsumasu('Factor')
    @leftrec
    def _factor_in_matrix_(self):  # noqa
        with self._choice():
            with self._option():
                self._operations_in_matrix_()
                self.name_last_node('op')
            with self._option():
                self._subexpression_()
                self.name_last_node('sub')
            with self._option():
                self._number_matrix_()
                self.name_last_node('nm')
            with self._option():
                self._identifier_()
                self.name_last_node('id0')
            with self._option():
                self._number_()
                self.name_last_node('num')
            with self._option():
                self._matrix_()
                self.name_last_node('m')
            with self._option():
                self._vector_()
                self.name_last_node('v')
            with self._option():
                self._set_()
                self.name_last_node('s')
            with self._option():
                self._constant_()
                self.name_last_node('c')
            self._error('no available options')
        self.ast._define(
            ['c', 'id0', 'm', 'nm', 'num', 'op', 's', 'sub', 'v'],
            []
        )

    @tatsumasu()
    @nomemo
    def _operations_in_matrix_(self):  # noqa
        with self._choice():
            with self._option():
                self._solver_in_matrix_operator_()
            with self._option():
                self._norm_operator_()
            with self._option():
                self._power_in_matrix_operator_()
            with self._option():
                self._inner_product_operator_()
            with self._option():
                self._frobenius_product_in_matrix_operator_()
            with self._option():
                self._hadamard_product_in_matrix_operator_()
            with self._option():
                self._cross_product_in_matrix_operator_()
            with self._option():
                self._kronecker_product_in_matrix_operator_()
            with self._option():
                self._sum_in_matrix_operator_()
            with self._option():
                self._integral_operator_()
            with self._option():
                self._trans_in_matrix_operator_()
            with self._option():
                self._sqrt_in_matrix_operator_()
            with self._option():
                self._function_operator_()
            with self._option():
                self._builtin_operators_()
            with self._option():
                self._pseudoinverse_in_matrix_operator_()
            self._error('no available options')

    @tatsumasu('Power')
    @nomemo
    def _power_in_matrix_operator_(self):  # noqa
        with self._choice():
            with self._option():
                self._factor_in_matrix_()
                self.name_last_node('base')
                self._token('^T')
                self.name_last_node('t')
            with self._option():
                self._factor_in_matrix_()
                self.name_last_node('base')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('^(-1)')
                        with self._option():
                            self._token('‚Åª¬π')
                        self._error('no available options')
                self.name_last_node('r')
            with self._option():
                self._factor_in_matrix_()
                self.name_last_node('base')
                self._token('^')
                self._factor_in_matrix_()
                self.name_last_node('power')
            with self._option():
                self._factor_in_matrix_()
                self.name_last_node('base')
                self._sup_integer_()
                self.name_last_node('power')
            self._error('no available options')
        self.ast._define(
            ['base', 'power', 'r', 't'],
            []
        )

    @tatsumasu('FroProduct')
    @nomemo
    def _frobenius_product_in_matrix_operator_(self):  # noqa
        self._factor_in_matrix_()
        self.name_last_node('left')
        self._token(':')
        self._factor_in_matrix_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'right'],
            []
        )

    @tatsumasu('HadamardProduct')
    @nomemo
    def _hadamard_product_in_matrix_operator_(self):  # noqa
        self._factor_in_matrix_()
        self.name_last_node('left')
        self._token('‚àò')
        self._factor_in_matrix_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'right'],
            []
        )

    @tatsumasu('CrossProduct')
    @nomemo
    def _cross_product_in_matrix_operator_(self):  # noqa
        self._factor_in_matrix_()
        self.name_last_node('left')
        self._token('√ó')
        self._factor_in_matrix_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'right'],
            []
        )

    @tatsumasu('KroneckerProduct')
    @nomemo
    def _kronecker_product_in_matrix_operator_(self):  # noqa
        self._factor_in_matrix_()
        self.name_last_node('left')
        self._token('‚äó')
        self._factor_in_matrix_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'right'],
            []
        )

    @tatsumasu('Transpose')
    @nomemo
    def _trans_in_matrix_operator_(self):  # noqa
        self._factor_in_matrix_()
        self.name_last_node('f')
        self._pattern('·µÄ')
        self.ast._define(
            ['f'],
            []
        )

    @tatsumasu('PseudoInverse')
    @nomemo
    def _pseudoinverse_in_matrix_operator_(self):  # noqa
        self._factor_in_matrix_()
        self.name_last_node('f')
        self._pattern('‚Å∫')
        self.ast._define(
            ['f'],
            []
        )

    @tatsumasu('Squareroot')
    def _sqrt_in_matrix_operator_(self):  # noqa
        self._pattern('‚àö')
        self._factor_in_matrix_()
        self.name_last_node('f')
        self.ast._define(
            ['f'],
            []
        )

    @tatsumasu('Solver')
    @nomemo
    def _solver_in_matrix_operator_(self):  # noqa
        with self._choice():
            with self._option():
                self._factor_in_matrix_()
                self.name_last_node('left')
                self._token('\\')
                self._factor_in_matrix_()
                self.name_last_node('right')
            with self._option():
                self._factor_in_matrix_()
                self.name_last_node('left')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('^(-1)')
                        with self._option():
                            self._token('‚Åª¬π')
                        self._error('no available options')
                self.name_last_node('p')
                self._factor_in_matrix_()
                self.name_last_node('right')
            self._error('no available options')
        self.ast._define(
            ['left', 'p', 'right'],
            []
        )

    @tatsumasu('Summation')
    def _sum_in_matrix_operator_(self):  # noqa
        with self._choice():
            with self._option():
                self._SUM_()
                self._token('_')
                self._identifier_alone_()
                self.name_last_node('sub')
                with self._if():
                    self._token('(')

                def block1():
                    self._hspace_()
                self._closure(block1)
                self._term_in_matrix_()
                self.name_last_node('exp')
            with self._option():
                self._SUM_()
                self._token('_(')

                def block3():
                    self._hspace_()
                self._closure(block3)
                self._identifier_alone_()
                self.name_last_node('id')

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._token('for')

                def block6():
                    self._hspace_()
                self._closure(block6)
                self._if_condition_()
                self.name_last_node('cond')

                def block8():
                    self._hspace_()
                self._closure(block8)
                self._token(')')
                self._term_in_matrix_()
                self.name_last_node('exp')
            with self._option():
                self._SUM_()
                self._token('_(')

                def block10():
                    self._hspace_()
                self._closure(block10)
                self._identifier_alone_()
                self.add_last_node_to_name('enum')

                def block12():

                    def block13():
                        self._hspace_()
                    self._closure(block13)
                    self._token(',')

                    def block14():
                        self._hspace_()
                    self._closure(block14)
                    self._identifier_alone_()
                    self.add_last_node_to_name('enum')
                self._closure(block12)

                def block16():
                    self._hspace_()
                self._closure(block16)
                self._IN_()

                def block17():
                    self._hspace_()
                self._closure(block17)
                with self._group():
                    with self._choice():
                        with self._option():
                            self._function_operator_()
                        with self._option():
                            self._identifier_alone_()
                        self._error('no available options')
                self.name_last_node('range')

                def block20():
                    self._hspace_()
                self._closure(block20)
                self._token(')')
                self._term_()
                self.name_last_node('exp')
            self._error('no available options')
        self.ast._define(
            ['cond', 'exp', 'id', 'range', 'sub'],
            ['enum']
        )

    @tatsumasu()
    def _hspace_(self):  # noqa
        with self._choice():
            with self._option():
                self._token(' ')
            with self._option():
                self._token('\t')
            self._error('no available options')

    @tatsumasu()
    def _line_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('\n')
            with self._option():
                self._token('\r')
            with self._option():
                self._token('\x0c')
            self._error('no available options')

    @tatsumasu()
    def _lines_(self):  # noqa

        def block0():
            self._line_()
        self._positive_closure(block0)

    @tatsumasu('IdentifierSubscript')
    def _identifier_with_subscript_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    self._identifier_alone_()
                    self.name_last_node('left')
                    self._token('_')
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._integer_()
                            with self._option():
                                self._token('*')
                            with self._option():
                                self._identifier_alone_()
                            self._error('no available options')
                    self.add_last_node_to_name('right')

                    def block3():
                        with self._choice():
                            with self._option():
                                with self._group():
                                    self._token(',')
                                    self._token('*')
                                    self.add_last_node_to_name('right')
                            with self._option():
                                with self._group():

                                    def block5():
                                        self._token(',')
                                    self._closure(block5)
                                    with self._group():
                                        with self._choice():
                                            with self._option():
                                                self._integer_()
                                            with self._option():
                                                self._identifier_alone_()
                                            self._error('no available options')
                                    self.add_last_node_to_name('right')
                            self._error('no available options')
                    self._closure(block3)
            with self._option():
                with self._group():
                    self._identifier_alone_()
                    self.name_last_node('left')
                    self._sub_integer_()
                    self.add_last_node_to_name('right')

                    def block11():
                        with self._choice():
                            with self._option():
                                with self._group():
                                    self._token(',')
                                    self._token('*')
                                    self.add_last_node_to_name('right')
                            with self._option():
                                with self._group():

                                    def block13():
                                        self._token(',')
                                    self._closure(block13)
                                    with self._group():
                                        self._sub_integer_()
                                    self.add_last_node_to_name('right')
                            self._error('no available options')
                    self._closure(block11)
            self._error('no available options')
        self.ast._define(
            ['left'],
            ['right']
        )

    @tatsumasu('SizeOp')
    def _size_op_(self):  # noqa
        self._POUND_()
        self._identifier_()
        self.name_last_node('i')
        self.ast._define(
            ['i'],
            []
        )

    @tatsumasu()
    def _keyword_str_(self):  # noqa
        self._pattern('[A-Za-z][A-Za-z0-9]*')

    @tatsumasu('IdentifierAlone')
    def _multi_str_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._pattern('[A-Za-z_\\p{Ll}\\p{Lu}\\p{Lo}]\\p{M}*([A-Z0-9a-z_\\p{Ll}\\p{Lu}\\p{Lo}]\\p{M}*)*')
                    self.name_last_node('value')
                with self._option():
                    self._token('`')
                    self._pattern('[^`]*')
                    self.name_last_node('id')
                    self._token('`')
                self._error('no available options')
        self.ast._define(
            ['id', 'value'],
            []
        )

    @tatsumasu()
    def _description_(self):  # noqa
        self._pattern('[^;\\n\\r\\f]*')

    @tatsumasu()
    def _desc_identifier_(self):  # noqa
        with self._ifnot():
            self._KEYWORDS_()
        self._token('`')
        self._pattern('[A-Za-z][[A-Za-z0-9]*')
        self._token('`')

    @tatsumasu()
    def _separator_(self):  # noqa
        with self._choice():
            with self._option():
                self._line_()
            with self._option():
                self._token(';')
            self._error('no available options')

    @tatsumasu()
    def _separator_with_space_(self):  # noqa

        def block0():
            self._hspace_()
        self._closure(block0)
        self._separator_()

        def block1():
            self._hspace_()
        self._closure(block1)

    @tatsumasu()
    def _blank_(self):  # noqa

        def block0():
            with self._group():
                with self._choice():
                    with self._option():
                        self._hspace_()
                    with self._option():
                        self._separator_()
                    self._error('no available options')
        self._closure(block0)

    @tatsumasu()
    def _params_separator_(self):  # noqa
        with self._choice():
            with self._option():
                self._token(',')
            with self._option():
                self._token(';')
            with self._option():
                self._token('x')
            with self._option():
                self._token('√ó')
            self._error('no available options')

    @tatsumasu('Pi')
    def _pi_(self):  # noqa
        self._pattern('œÄ')

    @tatsumasu('E')
    def _e_(self):  # noqa
        self._pattern('e')

    @tatsumasu('SinFunc')
    def _sin_func_(self):  # noqa
        self._SIN_()

        def block0():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('^')
                        self._integer_()
                        self.name_last_node('power')
                with self._option():
                    self._sup_integer_()
                    self.name_last_node('power')
                self._error('no available options')
        self._closure(block0)
        self._token('(')

        def block4():
            self._hspace_()
        self._closure(block4)
        self._expression_()
        self.name_last_node('param')

        def block6():
            self._hspace_()
        self._closure(block6)
        self._token(')')
        self.ast._define(
            ['param', 'power'],
            []
        )

    @tatsumasu('AsinFunc')
    def _asin_func_(self):  # noqa
        self._ASIN_()
        self.name_last_node('name')

        def block1():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('^')
                        self._integer_()
                        self.name_last_node('power')
                with self._option():
                    self._sup_integer_()
                    self.name_last_node('power')
                self._error('no available options')
        self._closure(block1)
        self._token('(')

        def block5():
            self._hspace_()
        self._closure(block5)
        self._expression_()
        self.name_last_node('param')

        def block7():
            self._hspace_()
        self._closure(block7)
        self._token(')')
        self.ast._define(
            ['name', 'param', 'power'],
            []
        )

    @tatsumasu('AsinFunc')
    def _arcsin_func_(self):  # noqa
        self._ARCSIN_()
        self.name_last_node('name')

        def block1():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('^')
                        self._integer_()
                        self.name_last_node('power')
                with self._option():
                    self._sup_integer_()
                    self.name_last_node('power')
                self._error('no available options')
        self._closure(block1)
        self._token('(')

        def block5():
            self._hspace_()
        self._closure(block5)
        self._expression_()
        self.name_last_node('param')

        def block7():
            self._hspace_()
        self._closure(block7)
        self._token(')')
        self.ast._define(
            ['name', 'param', 'power'],
            []
        )

    @tatsumasu('CosFunc')
    def _cos_func_(self):  # noqa
        self._COS_()

        def block0():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('^')
                        self._integer_()
                        self.name_last_node('power')
                with self._option():
                    self._sup_integer_()
                    self.name_last_node('power')
                self._error('no available options')
        self._closure(block0)
        self._token('(')

        def block4():
            self._hspace_()
        self._closure(block4)
        self._expression_()
        self.name_last_node('param')

        def block6():
            self._hspace_()
        self._closure(block6)
        self._token(')')
        self.ast._define(
            ['param', 'power'],
            []
        )

    @tatsumasu('AcosFunc')
    def _acos_func_(self):  # noqa
        self._ACOS_()
        self.name_last_node('name')

        def block1():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('^')
                        self._integer_()
                        self.name_last_node('power')
                with self._option():
                    self._sup_integer_()
                    self.name_last_node('power')
                self._error('no available options')
        self._closure(block1)
        self._token('(')

        def block5():
            self._hspace_()
        self._closure(block5)
        self._expression_()
        self.name_last_node('param')

        def block7():
            self._hspace_()
        self._closure(block7)
        self._token(')')
        self.ast._define(
            ['name', 'param', 'power'],
            []
        )

    @tatsumasu('AcosFunc')
    def _arccos_func_(self):  # noqa
        self._ARCCOS_()
        self.name_last_node('name')

        def block1():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('^')
                        self._integer_()
                        self.name_last_node('power')
                with self._option():
                    self._sup_integer_()
                    self.name_last_node('power')
                self._error('no available options')
        self._closure(block1)
        self._token('(')

        def block5():
            self._hspace_()
        self._closure(block5)
        self._expression_()
        self.name_last_node('param')

        def block7():
            self._hspace_()
        self._closure(block7)
        self._token(')')
        self.ast._define(
            ['name', 'param', 'power'],
            []
        )

    @tatsumasu('TanFunc')
    def _tan_func_(self):  # noqa
        self._TAN_()

        def block0():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('^')
                        self._integer_()
                        self.name_last_node('power')
                with self._option():
                    self._sup_integer_()
                    self.name_last_node('power')
                self._error('no available options')
        self._closure(block0)
        self._token('(')

        def block4():
            self._hspace_()
        self._closure(block4)
        self._expression_()
        self.name_last_node('param')

        def block6():
            self._hspace_()
        self._closure(block6)
        self._token(')')
        self.ast._define(
            ['param', 'power'],
            []
        )

    @tatsumasu('AtanFunc')
    def _atan_func_(self):  # noqa
        self._ATAN_()
        self.name_last_node('name')

        def block1():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('^')
                        self._integer_()
                        self.name_last_node('power')
                with self._option():
                    self._sup_integer_()
                    self.name_last_node('power')
                self._error('no available options')
        self._closure(block1)
        self._token('(')

        def block5():
            self._hspace_()
        self._closure(block5)
        self._expression_()
        self.name_last_node('param')

        def block7():
            self._hspace_()
        self._closure(block7)
        self._token(')')
        self.ast._define(
            ['name', 'param', 'power'],
            []
        )

    @tatsumasu('AtanFunc')
    def _arctan_func_(self):  # noqa
        self._ARCTAN_()
        self.name_last_node('name')

        def block1():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('^')
                        self._integer_()
                        self.name_last_node('power')
                with self._option():
                    self._sup_integer_()
                    self.name_last_node('power')
                self._error('no available options')
        self._closure(block1)
        self._token('(')

        def block5():
            self._hspace_()
        self._closure(block5)
        self._expression_()
        self.name_last_node('param')

        def block7():
            self._hspace_()
        self._closure(block7)
        self._token(')')
        self.ast._define(
            ['name', 'param', 'power'],
            []
        )

    @tatsumasu('SinhFunc')
    def _sinh_func_(self):  # noqa
        self._SINH_()

        def block0():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('^')
                        self._integer_()
                        self.name_last_node('power')
                with self._option():
                    self._sup_integer_()
                    self.name_last_node('power')
                self._error('no available options')
        self._closure(block0)
        self._token('(')

        def block4():
            self._hspace_()
        self._closure(block4)
        self._expression_()
        self.name_last_node('param')

        def block6():
            self._hspace_()
        self._closure(block6)
        self._token(')')
        self.ast._define(
            ['param', 'power'],
            []
        )

    @tatsumasu('AsinhFunc')
    def _asinh_func_(self):  # noqa
        self._ASINH_()
        self.name_last_node('name')

        def block1():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('^')
                        self._integer_()
                        self.name_last_node('power')
                with self._option():
                    self._sup_integer_()
                    self.name_last_node('power')
                self._error('no available options')
        self._closure(block1)
        self._token('(')

        def block5():
            self._hspace_()
        self._closure(block5)
        self._expression_()
        self.name_last_node('param')

        def block7():
            self._hspace_()
        self._closure(block7)
        self._token(')')
        self.ast._define(
            ['name', 'param', 'power'],
            []
        )

    @tatsumasu('AsinhFunc')
    def _arsinh_func_(self):  # noqa
        self._ARSINH_()
        self.name_last_node('name')

        def block1():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('^')
                        self._integer_()
                        self.name_last_node('power')
                with self._option():
                    self._sup_integer_()
                    self.name_last_node('power')
                self._error('no available options')
        self._closure(block1)
        self._token('(')

        def block5():
            self._hspace_()
        self._closure(block5)
        self._expression_()
        self.name_last_node('param')

        def block7():
            self._hspace_()
        self._closure(block7)
        self._token(')')
        self.ast._define(
            ['name', 'param', 'power'],
            []
        )

    @tatsumasu('CoshFunc')
    def _cosh_func_(self):  # noqa
        self._COSH_()

        def block0():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('^')
                        self._integer_()
                        self.name_last_node('power')
                with self._option():
                    self._sup_integer_()
                    self.name_last_node('power')
                self._error('no available options')
        self._closure(block0)
        self._token('(')

        def block4():
            self._hspace_()
        self._closure(block4)
        self._expression_()
        self.name_last_node('param')

        def block6():
            self._hspace_()
        self._closure(block6)
        self._token(')')
        self.ast._define(
            ['param', 'power'],
            []
        )

    @tatsumasu('AcoshFunc')
    def _acosh_func_(self):  # noqa
        self._ACOSH_()
        self.name_last_node('name')

        def block1():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('^')
                        self._integer_()
                        self.name_last_node('power')
                with self._option():
                    self._sup_integer_()
                    self.name_last_node('power')
                self._error('no available options')
        self._closure(block1)
        self._token('(')

        def block5():
            self._hspace_()
        self._closure(block5)
        self._expression_()
        self.name_last_node('param')

        def block7():
            self._hspace_()
        self._closure(block7)
        self._token(')')
        self.ast._define(
            ['name', 'param', 'power'],
            []
        )

    @tatsumasu('AcoshFunc')
    def _arcosh_func_(self):  # noqa
        self._ARCOSH_()
        self.name_last_node('name')

        def block1():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('^')
                        self._integer_()
                        self.name_last_node('power')
                with self._option():
                    self._sup_integer_()
                    self.name_last_node('power')
                self._error('no available options')
        self._closure(block1)
        self._token('(')

        def block5():
            self._hspace_()
        self._closure(block5)
        self._expression_()
        self.name_last_node('param')

        def block7():
            self._hspace_()
        self._closure(block7)
        self._token(')')
        self.ast._define(
            ['name', 'param', 'power'],
            []
        )

    @tatsumasu('TanhFunc')
    def _tanh_func_(self):  # noqa
        self._TANH_()

        def block0():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('^')
                        self._integer_()
                        self.name_last_node('power')
                with self._option():
                    self._sup_integer_()
                    self.name_last_node('power')
                self._error('no available options')
        self._closure(block0)
        self._token('(')

        def block4():
            self._hspace_()
        self._closure(block4)
        self._expression_()
        self.name_last_node('param')

        def block6():
            self._hspace_()
        self._closure(block6)
        self._token(')')
        self.ast._define(
            ['param', 'power'],
            []
        )

    @tatsumasu('AtanhFunc')
    def _atanh_func_(self):  # noqa
        self._ATANH_()
        self.name_last_node('name')

        def block1():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('^')
                        self._integer_()
                        self.name_last_node('power')
                with self._option():
                    self._sup_integer_()
                    self.name_last_node('power')
                self._error('no available options')
        self._closure(block1)
        self._token('(')

        def block5():
            self._hspace_()
        self._closure(block5)
        self._expression_()
        self.name_last_node('param')

        def block7():
            self._hspace_()
        self._closure(block7)
        self._token(')')
        self.ast._define(
            ['name', 'param', 'power'],
            []
        )

    @tatsumasu('AtanhFunc')
    def _artanh_func_(self):  # noqa
        self._ARTANH_()
        self.name_last_node('name')

        def block1():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('^')
                        self._integer_()
                        self.name_last_node('power')
                with self._option():
                    self._sup_integer_()
                    self.name_last_node('power')
                self._error('no available options')
        self._closure(block1)
        self._token('(')

        def block5():
            self._hspace_()
        self._closure(block5)
        self._expression_()
        self.name_last_node('param')

        def block7():
            self._hspace_()
        self._closure(block7)
        self._token(')')
        self.ast._define(
            ['name', 'param', 'power'],
            []
        )

    @tatsumasu('CotFunc')
    def _cot_func_(self):  # noqa
        self._COT_()

        def block0():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('^')
                        self._integer_()
                        self.name_last_node('power')
                with self._option():
                    self._sup_integer_()
                    self.name_last_node('power')
                self._error('no available options')
        self._closure(block0)
        self._token('(')

        def block4():
            self._hspace_()
        self._closure(block4)
        self._expression_()
        self.name_last_node('param')

        def block6():
            self._hspace_()
        self._closure(block6)
        self._token(')')
        self.ast._define(
            ['param', 'power'],
            []
        )

    @tatsumasu('SecFunc')
    def _sec_func_(self):  # noqa
        self._SEC_()

        def block0():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('^')
                        self._integer_()
                        self.name_last_node('power')
                with self._option():
                    self._sup_integer_()
                    self.name_last_node('power')
                self._error('no available options')
        self._closure(block0)
        self._token('(')

        def block4():
            self._hspace_()
        self._closure(block4)
        self._expression_()
        self.name_last_node('param')

        def block6():
            self._hspace_()
        self._closure(block6)
        self._token(')')
        self.ast._define(
            ['param', 'power'],
            []
        )

    @tatsumasu('CscFunc')
    def _csc_func_(self):  # noqa
        self._CSC_()

        def block0():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('^')
                        self._integer_()
                        self.name_last_node('power')
                with self._option():
                    self._sup_integer_()
                    self.name_last_node('power')
                self._error('no available options')
        self._closure(block0)
        self._token('(')

        def block4():
            self._hspace_()
        self._closure(block4)
        self._expression_()
        self.name_last_node('param')

        def block6():
            self._hspace_()
        self._closure(block6)
        self._token(')')
        self.ast._define(
            ['param', 'power'],
            []
        )

    @tatsumasu('Atan2Func')
    def _atan2_func_(self):  # noqa
        self._ATAN2_()
        self._token('(')

        def block0():
            self._hspace_()
        self._closure(block0)
        self._expression_()
        self.name_last_node('param')

        def block2():
            self._hspace_()
        self._closure(block2)
        self._params_separator_()
        self.name_last_node('separator')

        def block4():
            self._hspace_()
        self._closure(block4)
        self._expression_()
        self.name_last_node('second')

        def block6():
            self._hspace_()
        self._closure(block6)
        self._token(')')
        self.ast._define(
            ['param', 'second', 'separator'],
            []
        )

    @tatsumasu('TraceFunc')
    def _trace_func_(self):  # noqa
        self._TRACE_()
        self.name_last_node('name')
        self._token('(')

        def block1():
            self._hspace_()
        self._closure(block1)
        self._expression_()
        self.name_last_node('param')

        def block3():
            self._hspace_()
        self._closure(block3)
        self._token(')')
        self.ast._define(
            ['name', 'param'],
            []
        )

    @tatsumasu('TraceFunc')
    def _tr_func_(self):  # noqa
        self._TR_()
        self.name_last_node('name')
        self._token('(')

        def block1():
            self._hspace_()
        self._closure(block1)
        self._expression_()
        self.name_last_node('param')

        def block3():
            self._hspace_()
        self._closure(block3)
        self._token(')')
        self.ast._define(
            ['name', 'param'],
            []
        )

    @tatsumasu('DiagFunc')
    def _diag_func_(self):  # noqa
        self._DIAG_()
        self._token('(')

        def block0():
            self._hspace_()
        self._closure(block0)
        self._expression_()
        self.name_last_node('param')

        def block2():
            self._hspace_()
        self._closure(block2)
        self._token(')')
        self.ast._define(
            ['param'],
            []
        )

    @tatsumasu('VecFunc')
    def _vec_func_(self):  # noqa
        self._VEC_()
        self._token('(')

        def block0():
            self._hspace_()
        self._closure(block0)
        self._expression_()
        self.name_last_node('param')

        def block2():
            self._hspace_()
        self._closure(block2)
        self._token(')')
        self.ast._define(
            ['param'],
            []
        )

    @tatsumasu('DetFunc')
    def _det_func_(self):  # noqa
        self._DET_()
        self._token('(')

        def block0():
            self._hspace_()
        self._closure(block0)
        self._expression_()
        self.name_last_node('param')

        def block2():
            self._hspace_()
        self._closure(block2)
        self._token(')')
        self.ast._define(
            ['param'],
            []
        )

    @tatsumasu('RankFunc')
    def _rank_func_(self):  # noqa
        self._RANK_()
        self._token('(')

        def block0():
            self._hspace_()
        self._closure(block0)
        self._expression_()
        self.name_last_node('param')

        def block2():
            self._hspace_()
        self._closure(block2)
        self._token(')')
        self.ast._define(
            ['param'],
            []
        )

    @tatsumasu('NullFunc')
    def _null_func_(self):  # noqa
        self._NULL_()
        self._token('(')

        def block0():
            self._hspace_()
        self._closure(block0)
        self._expression_()
        self.name_last_node('param')

        def block2():
            self._hspace_()
        self._closure(block2)
        self._token(')')
        self.ast._define(
            ['param'],
            []
        )

    @tatsumasu('OrthFunc')
    def _orth_func_(self):  # noqa
        self._ORTH_()
        self._token('(')

        def block0():
            self._hspace_()
        self._closure(block0)
        self._expression_()
        self.name_last_node('param')

        def block2():
            self._hspace_()
        self._closure(block2)
        self._token(')')
        self.ast._define(
            ['param'],
            []
        )

    @tatsumasu('InvFunc')
    def _inv_func_(self):  # noqa
        self._INV_()
        self._token('(')

        def block0():
            self._hspace_()
        self._closure(block0)
        self._expression_()
        self.name_last_node('param')

        def block2():
            self._hspace_()
        self._closure(block2)
        self._token(')')
        self.ast._define(
            ['param'],
            []
        )

    @tatsumasu('FacesOfEdgeFunc')
    def _faces_of_edge_func_(self):  # noqa
        self._pattern('faces_of_edge')
        self.name_last_node('name')
        self._token('(')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._expression_()
            self.add_last_node_to_name('params')

            def block4():

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._params_separator_()
                self.add_last_node_to_name('separators')

                def block7():
                    self._hspace_()
                self._closure(block7)
                self._expression_()
                self.add_last_node_to_name('params')
            self._closure(block4)
        self._closure(block1)

        def block9():
            self._hspace_()
        self._closure(block9)
        self._token(')')
        self.ast._define(
            ['name'],
            ['params', 'separators']
        )

    @tatsumasu('DihedralFunc')
    def _dihedral_func_(self):  # noqa
        self._pattern('dihedral')
        self.name_last_node('name')
        self._token('(')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._expression_()
            self.add_last_node_to_name('params')

            def block4():

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._params_separator_()
                self.add_last_node_to_name('separators')

                def block7():
                    self._hspace_()
                self._closure(block7)
                self._expression_()
                self.add_last_node_to_name('params')
            self._closure(block4)
        self._closure(block1)

        def block9():
            self._hspace_()
        self._closure(block9)
        self._token(')')
        self.ast._define(
            ['name'],
            ['params', 'separators']
        )

    @tatsumasu('FaceNormalFunc')
    def _face_normal_func_(self):  # noqa
        self._pattern('face_normal')
        self.name_last_node('name')
        self._token('(')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._expression_()
            self.add_last_node_to_name('params')

            def block4():

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._params_separator_()
                self.add_last_node_to_name('separators')

                def block7():
                    self._hspace_()
                self._closure(block7)
                self._expression_()
                self.add_last_node_to_name('params')
            self._closure(block4)
        self._closure(block1)

        def block9():
            self._hspace_()
        self._closure(block9)
        self._token(')')
        self.ast._define(
            ['name'],
            ['params', 'separators']
        )

    @tatsumasu('GetAdjacentVerticesVFunc')
    def _get_adjacent_vertices_v_func_(self):  # noqa
        self._pattern('get_adjacent_vertices_v')
        self.name_last_node('name')
        self._token('(')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._expression_()
            self.add_last_node_to_name('params')

            def block4():

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._params_separator_()
                self.add_last_node_to_name('separators')

                def block7():
                    self._hspace_()
                self._closure(block7)
                self._expression_()
                self.add_last_node_to_name('params')
            self._closure(block4)
        self._closure(block1)

        def block9():
            self._hspace_()
        self._closure(block9)
        self._token(')')
        self.ast._define(
            ['name'],
            ['params', 'separators']
        )

    @tatsumasu('GetIncidentEdgesVFunc')
    def _get_incident_edges_v_func_(self):  # noqa
        self._pattern('get_incident_edges_v')
        self.name_last_node('name')
        self._token('(')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._expression_()
            self.add_last_node_to_name('params')

            def block4():

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._params_separator_()
                self.add_last_node_to_name('separators')

                def block7():
                    self._hspace_()
                self._closure(block7)
                self._expression_()
                self.add_last_node_to_name('params')
            self._closure(block4)
        self._closure(block1)

        def block9():
            self._hspace_()
        self._closure(block9)
        self._token(')')
        self.ast._define(
            ['name'],
            ['params', 'separators']
        )

    @tatsumasu('GetIncidentFacesVFunc')
    def _get_incident_faces_v_func_(self):  # noqa
        self._pattern('get_incident_faces_v')
        self.name_last_node('name')
        self._token('(')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._expression_()
            self.add_last_node_to_name('params')

            def block4():

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._params_separator_()
                self.add_last_node_to_name('separators')

                def block7():
                    self._hspace_()
                self._closure(block7)
                self._expression_()
                self.add_last_node_to_name('params')
            self._closure(block4)
        self._closure(block1)

        def block9():
            self._hspace_()
        self._closure(block9)
        self._token(')')
        self.ast._define(
            ['name'],
            ['params', 'separators']
        )

    @tatsumasu('GetIncidentVerticesEFunc')
    def _get_incident_vertices_e_func_(self):  # noqa
        self._pattern('get_incident_vertices_e')
        self.name_last_node('name')
        self._token('(')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._expression_()
            self.add_last_node_to_name('params')

            def block4():

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._params_separator_()
                self.add_last_node_to_name('separators')

                def block7():
                    self._hspace_()
                self._closure(block7)
                self._expression_()
                self.add_last_node_to_name('params')
            self._closure(block4)
        self._closure(block1)

        def block9():
            self._hspace_()
        self._closure(block9)
        self._token(')')
        self.ast._define(
            ['name'],
            ['params', 'separators']
        )

    @tatsumasu('GetIncidentFacesEFunc')
    def _get_incident_faces_e_func_(self):  # noqa
        self._pattern('get_incident_faces_e')
        self.name_last_node('name')
        self._token('(')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._expression_()
            self.add_last_node_to_name('params')

            def block4():

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._params_separator_()
                self.add_last_node_to_name('separators')

                def block7():
                    self._hspace_()
                self._closure(block7)
                self._expression_()
                self.add_last_node_to_name('params')
            self._closure(block4)
        self._closure(block1)

        def block9():
            self._hspace_()
        self._closure(block9)
        self._token(')')
        self.ast._define(
            ['name'],
            ['params', 'separators']
        )

    @tatsumasu('GetDiamondVerticesEFunc')
    def _get_diamond_vertices_e_func_(self):  # noqa
        self._pattern('get_diamond_vertices_e')
        self.name_last_node('name')
        self._token('(')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._expression_()
            self.add_last_node_to_name('params')

            def block4():

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._params_separator_()
                self.add_last_node_to_name('separators')

                def block7():
                    self._hspace_()
                self._closure(block7)
                self._expression_()
                self.add_last_node_to_name('params')
            self._closure(block4)
        self._closure(block1)

        def block9():
            self._hspace_()
        self._closure(block9)
        self._token(')')
        self.ast._define(
            ['name'],
            ['params', 'separators']
        )

    @tatsumasu('GetIncidentVerticesFFunc')
    def _get_incident_vertices_f_func_(self):  # noqa
        self._pattern('get_incident_vertices_f')
        self.name_last_node('name')
        self._token('(')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._expression_()
            self.add_last_node_to_name('params')

            def block4():

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._params_separator_()
                self.add_last_node_to_name('separators')

                def block7():
                    self._hspace_()
                self._closure(block7)
                self._expression_()
                self.add_last_node_to_name('params')
            self._closure(block4)
        self._closure(block1)

        def block9():
            self._hspace_()
        self._closure(block9)
        self._token(')')
        self.ast._define(
            ['name'],
            ['params', 'separators']
        )

    @tatsumasu('GetIncidentEdgesFFunc')
    def _get_incident_edges_f_func_(self):  # noqa
        self._pattern('get_incident_edges_f')
        self.name_last_node('name')
        self._token('(')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._expression_()
            self.add_last_node_to_name('params')

            def block4():

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._params_separator_()
                self.add_last_node_to_name('separators')

                def block7():
                    self._hspace_()
                self._closure(block7)
                self._expression_()
                self.add_last_node_to_name('params')
            self._closure(block4)
        self._closure(block1)

        def block9():
            self._hspace_()
        self._closure(block9)
        self._token(')')
        self.ast._define(
            ['name'],
            ['params', 'separators']
        )

    @tatsumasu('GetAdjacentFacesFFunc')
    def _get_adjacent_faces_f_func_(self):  # noqa
        self._pattern('get_adjacent_faces_f')
        self.name_last_node('name')
        self._token('(')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._expression_()
            self.add_last_node_to_name('params')

            def block4():

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._params_separator_()
                self.add_last_node_to_name('separators')

                def block7():
                    self._hspace_()
                self._closure(block7)
                self._expression_()
                self.add_last_node_to_name('params')
            self._closure(block4)
        self._closure(block1)

        def block9():
            self._hspace_()
        self._closure(block9)
        self._token(')')
        self.ast._define(
            ['name'],
            ['params', 'separators']
        )

    @tatsumasu('BuildVertexVectorFunc')
    def _build_vertex_vector_func_(self):  # noqa
        self._pattern('build_vertex_vector')
        self.name_last_node('name')
        self._token('(')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._expression_()
            self.add_last_node_to_name('params')

            def block4():

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._params_separator_()
                self.add_last_node_to_name('separators')

                def block7():
                    self._hspace_()
                self._closure(block7)
                self._expression_()
                self.add_last_node_to_name('params')
            self._closure(block4)
        self._closure(block1)

        def block9():
            self._hspace_()
        self._closure(block9)
        self._token(')')
        self.ast._define(
            ['name'],
            ['params', 'separators']
        )

    @tatsumasu('BuildEdgeVectorFunc')
    def _build_edge_vector_func_(self):  # noqa
        self._pattern('build_edge_vector')
        self.name_last_node('name')
        self._token('(')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._expression_()
            self.add_last_node_to_name('params')

            def block4():

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._params_separator_()
                self.add_last_node_to_name('separators')

                def block7():
                    self._hspace_()
                self._closure(block7)
                self._expression_()
                self.add_last_node_to_name('params')
            self._closure(block4)
        self._closure(block1)

        def block9():
            self._hspace_()
        self._closure(block9)
        self._token(')')
        self.ast._define(
            ['name'],
            ['params', 'separators']
        )

    @tatsumasu('BuildFaceVectorFunc')
    def _build_face_vector_func_(self):  # noqa
        self._pattern('build_face_vector')
        self.name_last_node('name')
        self._token('(')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._expression_()
            self.add_last_node_to_name('params')

            def block4():

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._params_separator_()
                self.add_last_node_to_name('separators')

                def block7():
                    self._hspace_()
                self._closure(block7)
                self._expression_()
                self.add_last_node_to_name('params')
            self._closure(block4)
        self._closure(block1)

        def block9():
            self._hspace_()
        self._closure(block9)
        self._token(')')
        self.ast._define(
            ['name'],
            ['params', 'separators']
        )

    @tatsumasu('StarFunc')
    def _star_func_(self):  # noqa
        self._pattern('star')
        self.name_last_node('name')
        self._token('(')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._expression_()
            self.add_last_node_to_name('params')

            def block4():

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._params_separator_()
                self.add_last_node_to_name('separators')

                def block7():
                    self._hspace_()
                self._closure(block7)
                self._expression_()
                self.add_last_node_to_name('params')
            self._closure(block4)
        self._closure(block1)

        def block9():
            self._hspace_()
        self._closure(block9)
        self._token(')')
        self.ast._define(
            ['name'],
            ['params', 'separators']
        )

    @tatsumasu('ClosureFunc')
    def _closure_func_(self):  # noqa
        self._pattern('closure')
        self.name_last_node('name')
        self._token('(')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._expression_()
            self.add_last_node_to_name('params')

            def block4():

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._params_separator_()
                self.add_last_node_to_name('separators')

                def block7():
                    self._hspace_()
                self._closure(block7)
                self._expression_()
                self.add_last_node_to_name('params')
            self._closure(block4)
        self._closure(block1)

        def block9():
            self._hspace_()
        self._closure(block9)
        self._token(')')
        self.ast._define(
            ['name'],
            ['params', 'separators']
        )

    @tatsumasu('LinkFunc')
    def _link_func_(self):  # noqa
        self._pattern('link')
        self.name_last_node('name')
        self._token('(')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._expression_()
            self.add_last_node_to_name('params')

            def block4():

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._params_separator_()
                self.add_last_node_to_name('separators')

                def block7():
                    self._hspace_()
                self._closure(block7)
                self._expression_()
                self.add_last_node_to_name('params')
            self._closure(block4)
        self._closure(block1)

        def block9():
            self._hspace_()
        self._closure(block9)
        self._token(')')
        self.ast._define(
            ['name'],
            ['params', 'separators']
        )

    @tatsumasu('BoundaryFunc')
    def _boundary_func_(self):  # noqa
        self._pattern('boundary')
        self.name_last_node('name')
        self._token('(')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._expression_()
            self.add_last_node_to_name('params')

            def block4():

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._params_separator_()
                self.add_last_node_to_name('separators')

                def block7():
                    self._hspace_()
                self._closure(block7)
                self._expression_()
                self.add_last_node_to_name('params')
            self._closure(block4)
        self._closure(block1)

        def block9():
            self._hspace_()
        self._closure(block9)
        self._token(')')
        self.ast._define(
            ['name'],
            ['params', 'separators']
        )

    @tatsumasu('IsComplexFunc')
    def _isComplex_func_(self):  # noqa
        self._pattern('isComplex')
        self.name_last_node('name')
        self._token('(')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._expression_()
            self.add_last_node_to_name('params')

            def block4():

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._params_separator_()
                self.add_last_node_to_name('separators')

                def block7():
                    self._hspace_()
                self._closure(block7)
                self._expression_()
                self.add_last_node_to_name('params')
            self._closure(block4)
        self._closure(block1)

        def block9():
            self._hspace_()
        self._closure(block9)
        self._token(')')
        self.ast._define(
            ['name'],
            ['params', 'separators']
        )

    @tatsumasu('IsPureComplexFunc')
    def _isPureComplex_func_(self):  # noqa
        self._pattern('isPureComplex')
        self.name_last_node('name')
        self._token('(')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._expression_()
            self.add_last_node_to_name('params')

            def block4():

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._params_separator_()
                self.add_last_node_to_name('separators')

                def block7():
                    self._hspace_()
                self._closure(block7)
                self._expression_()
                self.add_last_node_to_name('params')
            self._closure(block4)
        self._closure(block1)

        def block9():
            self._hspace_()
        self._closure(block9)
        self._token(')')
        self.ast._define(
            ['name'],
            ['params', 'separators']
        )

    @tatsumasu()
    def _Directive_(self):  # noqa
        self._import_()

    @tatsumasu('Import')
    def _import_(self):  # noqa
        self._import_var_()
        self.add_last_node_to_name('names')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._token(',')

            def block3():
                self._hspace_()
            self._closure(block3)
            self._import_var_()
            self.add_last_node_to_name('names')
        self._closure(block1)

        def block5():
            self._hspace_()
        self._closure(block5)
        self._FROM_()

        def block6():
            self._hspace_()
        self._positive_closure(block6)
        self._multi_str_()
        self.name_last_node('package')

        def block8():
            self._hspace_()
        self._closure(block8)

        def block9():
            self._token('(')

            def block10():

                def block11():
                    self._hspace_()
                self._closure(block11)
                self._identifier_alone_()
                self.add_last_node_to_name('params')

                def block13():

                    def block14():
                        self._hspace_()
                    self._closure(block14)
                    self._params_separator_()
                    self.add_last_node_to_name('separators')

                    def block16():
                        self._hspace_()
                    self._closure(block16)
                    self._identifier_alone_()
                    self.add_last_node_to_name('params')
                self._closure(block13)
            self._closure(block10)

            def block18():
                self._hspace_()
            self._closure(block18)
            self._token(')')
        self._closure(block9)

        def block19():
            self._hspace_()
        self._closure(block19)
        self.ast._define(
            ['package'],
            ['names', 'params', 'separators']
        )

    @tatsumasu('ImportVar')
    def _import_var_(self):  # noqa
        self._multi_str_()
        self.name_last_node('name')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._AS_()

            def block3():
                self._hspace_()
            self._closure(block3)
            self._multi_str_()
            self.name_last_node('r')
        self._closure(block1)
        self.ast._define(
            ['name', 'r'],
            []
        )

    @tatsumasu('WhereConditions')
    def _where_conditions_(self):  # noqa

        def block0():
            self._hspace_()
        self._closure(block0)
        self._where_condition_()
        self.add_last_node_to_name('value')

        def block2():

            def block3():
                self._separator_with_space_()
            self._positive_closure(block3)
            self._where_condition_()
            self.add_last_node_to_name('value')
        self._closure(block2)
        self.ast._define(
            [],
            ['value']
        )

    @tatsumasu()
    def _where_condition_(self):  # noqa
        with self._choice():
            with self._option():
                self._la_where_condition_()
            with self._option():
                self._de_where_condition_()
            self._error('no available options')

    @tatsumasu('WhereCondition')
    def _la_where_condition_(self):  # noqa
        self._identifier_()
        self.add_last_node_to_name('id')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._token(',')

            def block3():
                self._hspace_()
            self._closure(block3)
            self._identifier_()
            self.add_last_node_to_name('id')
        self._closure(block1)

        def block5():
            self._hspace_()
        self._closure(block5)
        with self._group():
            with self._choice():
                with self._option():
                    self._token(':')
                with self._option():
                    self._IN_()
                self._error('no available options')

        def block7():
            self._hspace_()
        self._closure(block7)
        self._la_type_()
        self.name_last_node('type')

        def block9():

            def block10():
                self._hspace_()
            self._closure(block10)
            self._token('index')
            self.name_last_node('index')
        self._closure(block9)

        def block12():

            def block13():
                self._hspace_()
            self._closure(block13)
            self._token(':')

            def block14():
                self._hspace_()
            self._closure(block14)
            self._description_()
            self.name_last_node('desc')
        self._closure(block12)
        self.ast._define(
            ['desc', 'index', 'type'],
            ['id']
        )

    @tatsumasu('DeWhereCondition')
    def _de_where_condition_(self):  # noqa
        self._identifier_()
        self.add_last_node_to_name('id')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._token(',')

            def block3():
                self._hspace_()
            self._closure(block3)
            self._identifier_()
            self.add_last_node_to_name('id')
        self._closure(block1)

        def block5():
            self._hspace_()
        self._closure(block5)
        self._SUBSET_()
        self.name_last_node('subset')

        def block7():
            self._hspace_()
        self._closure(block7)
        self._la_type_()
        self.name_last_node('type')

        def block9():

            def block10():
                self._hspace_()
            self._closure(block10)
            self._token('index')
            self.name_last_node('index')
        self._closure(block9)

        def block12():

            def block13():
                self._hspace_()
            self._closure(block13)
            self._token(':')

            def block14():
                self._hspace_()
            self._closure(block14)
            self._description_()
            self.name_last_node('desc')
        self._closure(block12)
        self.ast._define(
            ['desc', 'index', 'subset', 'type'],
            ['id']
        )

    @tatsumasu('WhereCondition')
    def _where_condition_terse_(self):  # noqa
        self._identifier_()
        self.add_last_node_to_name('id')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._token(',')

            def block3():
                self._hspace_()
            self._closure(block3)
            self._identifier_()
            self.add_last_node_to_name('id')
        self._closure(block1)

        def block5():
            self._hspace_()
        self._closure(block5)
        with self._group():
            with self._choice():
                with self._option():
                    self._token(':')
                with self._option():
                    self._IN_()
                self._error('no available options')

        def block7():
            self._hspace_()
        self._closure(block7)
        self._la_type_()
        self.name_last_node('type')

        def block9():

            def block10():
                self._hspace_()
            self._closure(block10)
            self._token('index')
            self.name_last_node('index')
        self._closure(block9)
        self.ast._define(
            ['index', 'type'],
            ['id']
        )

    @tatsumasu()
    @nomemo
    def _valid_block_(self):  # noqa
        with self._choice():
            with self._option():
                self._Directive_()
            with self._option():
                self._params_block_()
            with self._option():
                self._statements_()
            self._error('no available options')

    @tatsumasu('ParamsBlock')
    def _params_block_(self):  # noqa

        def block0():
            with self._group():
                with self._choice():
                    with self._option():
                        self._WHERE_()
                    with self._option():
                        self._GIVEN_()
                    self._error('no available options')
            self.name_last_node('annotation')

            def block3():
                self._separator_with_space_()
            self._positive_closure(block3)
        self._closure(block0)
        self._where_conditions_()
        self.name_last_node('conds')
        self.ast._define(
            ['annotation', 'conds'],
            []
        )

    @tatsumasu()
    def _builtin_operators_(self):  # noqa
        self._predefined_built_operators_()

    @tatsumasu('Statements')
    @nomemo
    def _statements_(self):  # noqa
        self._statement_()
        self.name_last_node('stat')
        self.ast._define(
            ['stat'],
            []
        )

    @tatsumasu()
    @nomemo
    def _statement_(self):  # noqa
        with self._choice():
            with self._option():
                self._local_func_()
            with self._option():
                self._assignment_()
            with self._option():
                self._de_solver_()
            with self._option():
                self._right_hand_side_()
            self._error('no available options')

    @tatsumasu('Expression')
    @leftrec
    def _expression_(self):  # noqa
        with self._choice():
            with self._option():
                self._addition_()
                self.name_last_node('value')
            with self._option():
                self._subtraction_()
                self.name_last_node('value')
            with self._option():
                self._add_sub_operator_()
                self.name_last_node('value')
            with self._option():
                with self._optional():
                    self._token('-')
                self.name_last_node('sign')
                self._term_()
                self.name_last_node('value')
            self._error('no available options')
        self.ast._define(
            ['sign', 'value'],
            []
        )

    @tatsumasu('Assignment')
    @nomemo
    def _assignment_(self):  # noqa
        with self._choice():
            with self._option():
                self._identifier_()
                self.add_last_node_to_name('left')

                def block1():

                    def block2():
                        self._hspace_()
                    self._closure(block2)
                    self._token(',')

                    def block3():
                        self._hspace_()
                    self._closure(block3)
                    self._identifier_()
                    self.add_last_node_to_name('left')
                self._closure(block1)

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._token('=')
                self.name_last_node('op')

                def block7():
                    self._hspace_()
                self._closure(block7)

                def block8():
                    self._separator_with_space_()
                self._closure(block8)
                self._right_hand_side_()
                self.add_last_node_to_name('right')
            with self._option():
                self._identifier_()
                self.add_last_node_to_name('left')

                def block11():

                    def block12():
                        self._hspace_()
                    self._closure(block12)
                    self._token(',')

                    def block13():
                        self._hspace_()
                    self._closure(block13)
                    self._identifier_()
                    self.add_last_node_to_name('left')
                self._closure(block11)

                def block15():
                    self._hspace_()
                self._closure(block15)
                self._token('+=')
                self.name_last_node('op')

                def block17():
                    self._hspace_()
                self._closure(block17)

                def block18():
                    self._separator_with_space_()
                self._closure(block18)
                self._right_hand_side_()
                self.add_last_node_to_name('right')
            with self._option():

                def block20():
                    self._SOLVE_()
                    self._token('_(')

                    def block21():
                        self._hspace_()
                    self._closure(block21)
                    self._where_condition_terse_()
                    self.add_last_node_to_name('v')

                    def block23():
                        self._hspace_()
                    self._closure(block23)

                    def block24():
                        self._token(',')

                        def block25():
                            self._hspace_()
                        self._closure(block25)
                        self._where_condition_terse_()
                        self.add_last_node_to_name('v')

                        def block27():
                            self._hspace_()
                        self._closure(block27)
                    self._closure(block24)
                    self._token(')')

                    def block28():
                        self._hspace_()
                    self._closure(block28)
                self._closure(block20)
                self._expression_()
                self.add_last_node_to_name('lexpr')

                def block30():
                    self._hspace_()
                self._closure(block30)
                self._token('=')
                self.name_last_node('op')

                def block32():
                    self._hspace_()
                self._closure(block32)
                self._expression_()
                self.add_last_node_to_name('rexpr')

                def block34():

                    def block35():
                        self._hspace_()
                    self._closure(block35)
                    self._token(';')

                    def block36():
                        self._hspace_()
                    self._closure(block36)
                    self._expression_()
                    self.add_last_node_to_name('lexpr')

                    def block38():
                        self._hspace_()
                    self._closure(block38)
                    self._token('=')
                    self.name_last_node('op')

                    def block40():
                        self._hspace_()
                    self._closure(block40)
                    self._expression_()
                    self.add_last_node_to_name('rexpr')
                self._closure(block34)
            self._error('no available options')
        self.ast._define(
            ['op'],
            ['left', 'lexpr', 'rexpr', 'right', 'v']
        )

    @tatsumasu('GeneralAssignment')
    def _general_assignment_(self):  # noqa
        self._left_hand_side_()
        self.add_last_node_to_name('left')

        def block1():

            def block2():
                self._hspace_()
            self._closure(block2)
            self._token(',')

            def block3():
                self._hspace_()
            self._closure(block3)
            self._left_hand_side_()
            self.add_last_node_to_name('left')
        self._closure(block1)

        def block5():
            self._hspace_()
        self._closure(block5)
        self._token('=')
        self.name_last_node('op')

        def block7():
            self._hspace_()
        self._closure(block7)
        self._right_hand_side_()
        self.add_last_node_to_name('right')
        self.ast._define(
            ['op'],
            ['left', 'right']
        )

    @tatsumasu('DeSolver')
    def _de_solver_(self):  # noqa
        self._SOLVE_()
        self._token('_')
        self._identifier_()
        self.name_last_node('u')

        def block1():
            self._hspace_()
        self._closure(block1)
        self._expression_()
        self.add_last_node_to_name('lexpr')

        def block3():
            self._hspace_()
        self._closure(block3)
        self._token('=')
        self.name_last_node('op')

        def block5():
            self._hspace_()
        self._closure(block5)
        self._expression_()
        self.add_last_node_to_name('rexpr')

        def block7():

            def block8():
                self._hspace_()
            self._closure(block8)
            self._token(';')

            def block9():
                self._hspace_()
            self._closure(block9)
            self._expression_()
            self.add_last_node_to_name('lexpr')

            def block11():
                self._hspace_()
            self._closure(block11)
            self._token('=')
            self.name_last_node('op')

            def block13():
                self._hspace_()
            self._closure(block13)
            self._expression_()
            self.add_last_node_to_name('rexpr')
        self._closure(block7)
        self.ast._define(
            ['op', 'u'],
            ['lexpr', 'rexpr']
        )

    @tatsumasu('LocalFunc')
    def _local_func_(self):  # noqa
        with self._choice():
            with self._option():
                self._identifier_()
                self.name_last_node('name')
                self._token('(')
                self.name_last_node('def_p')

                def block2():

                    def block3():
                        self._hspace_()
                    self._closure(block3)
                    self._identifier_alone_()
                    self.add_last_node_to_name('params')

                    def block5():

                        def block6():
                            self._hspace_()
                        self._closure(block6)
                        self._params_separator_()
                        self.add_last_node_to_name('separators')

                        def block8():
                            self._hspace_()
                        self._closure(block8)
                        self._identifier_alone_()
                        self.add_last_node_to_name('params')
                    self._closure(block5)
                self._closure(block2)

                def block10():
                    self._hspace_()
                self._closure(block10)
                self._token(')')

                def block11():
                    self._hspace_()
                self._closure(block11)
                self._token('=')
                self.name_last_node('op')

                def block13():
                    self._hspace_()
                self._closure(block13)
                self._right_hand_side_()
                self.add_last_node_to_name('expr')
                with self._optional():

                    def block15():
                        self._hspace_()
                    self._closure(block15)
                    self._line_()

                def block16():
                    self._hspace_()
                self._closure(block16)
                with self._group():
                    with self._choice():
                        with self._option():
                            self._WHERE_()
                        with self._option():
                            self._GIVEN_()
                        self._error('no available options')

                def block18():
                    self._hspace_()
                self._closure(block18)
                self._where_condition_()
                self.add_last_node_to_name('defs')

                def block20():

                    def block21():
                        self._hspace_()
                    self._closure(block21)
                    self._token(',')

                    def block22():
                        self._hspace_()
                    self._closure(block22)
                    self._where_condition_()
                    self.add_last_node_to_name('defs')
                self._closure(block20)
            with self._option():
                self._identifier_()
                self.name_last_node('name')
                self._token('[')

                def block25():

                    def block26():
                        self._hspace_()
                    self._closure(block26)
                    self._identifier_alone_()
                    self.add_last_node_to_name('params')

                    def block28():

                        def block29():
                            self._hspace_()
                        self._closure(block29)
                        self._params_separator_()
                        self.add_last_node_to_name('separators')

                        def block31():
                            self._hspace_()
                        self._closure(block31)
                        self._identifier_alone_()
                        self.add_last_node_to_name('params')
                    self._closure(block28)
                self._closure(block25)

                def block33():
                    self._hspace_()
                self._closure(block33)
                self._token(']')

                def block34():
                    self._hspace_()
                self._closure(block34)
                self._token('=')
                self.name_last_node('op')

                def block36():
                    self._hspace_()
                self._closure(block36)
                self._right_hand_side_()
                self.add_last_node_to_name('expr')
                with self._optional():

                    def block38():
                        self._hspace_()
                    self._closure(block38)
                    self._line_()

                def block39():
                    self._hspace_()
                self._closure(block39)
                with self._group():
                    with self._choice():
                        with self._option():
                            self._WHERE_()
                        with self._option():
                            self._GIVEN_()
                        self._error('no available options')

                def block41():
                    self._hspace_()
                self._closure(block41)
                self._where_condition_()
                self.add_last_node_to_name('defs')

                def block43():

                    def block44():
                        self._hspace_()
                    self._closure(block44)
                    self._token(',')

                    def block45():
                        self._hspace_()
                    self._closure(block45)
                    self._where_condition_()
                    self.add_last_node_to_name('defs')
                self._closure(block43)
            self._error('no available options')
        self.ast._define(
            ['def_p', 'name', 'op'],
            ['defs', 'expr', 'params', 'separators']
        )

    @tatsumasu()
    def _right_hand_side_(self):  # noqa
        with self._choice():
            with self._option():
                self._expression_()
            with self._option():
                self._optimize_operator_()
            with self._option():
                self._multi_cond_expr_()
            self._error('no available options')

    @tatsumasu()
    def _left_hand_side_(self):  # noqa
        with self._choice():
            with self._option():
                self._identifier_()
            with self._option():
                self._vector_()
            with self._option():
                self._matrix_()
            self._error('no available options')

    @tatsumasu()
    @leftrec
    def _term_(self):  # noqa
        with self._choice():
            with self._option():
                self._multiplication_()
            with self._option():
                self._division_()
            with self._option():
                self._factor_()
            self._error('no available options')

    @tatsumasu('Factor')
    @leftrec
    def _factor_(self):  # noqa
        with self._choice():
            with self._option():
                self._operations_()
                self.name_last_node('op')
            with self._option():
                self._subexpression_()
                self.name_last_node('sub')
            with self._option():
                self._number_matrix_()
                self.name_last_node('nm')
            with self._option():
                self._identifier_()
                self.name_last_node('id0')
            with self._option():
                self._number_()
                self.name_last_node('num')
            with self._option():
                self._matrix_()
                self.name_last_node('m')
            with self._option():
                self._vector_()
                self.name_last_node('v')
            with self._option():
                self._set_()
                self.name_last_node('s')
            with self._option():
                self._constant_()
                self.name_last_node('c')
            self._error('no available options')
        self.ast._define(
            ['c', 'id0', 'm', 'nm', 'num', 'op', 's', 'sub', 'v'],
            []
        )

    @tatsumasu()
    def _sub_factor_(self):  # noqa
        with self._choice():
            with self._option():
                self._subexpression_()
            with self._option():
                self._identifier_alone_()
            with self._option():
                self._number_()
            with self._option():
                self._constant_()
            self._error('no available options')

    @tatsumasu()
    def _constant_(self):  # noqa
        self._pi_()

    @tatsumasu()
    def _KEYWORDS_(self):  # noqa
        self._BUILTIN_KEYWORDS_()

    @tatsumasu('Subexpression')
    def _subexpression_(self):  # noqa
        self._token('(')

        def block0():
            self._hspace_()
        self._closure(block0)
        self._expression_()
        self.name_last_node('value')

        def block2():
            self._hspace_()
        self._closure(block2)
        self._token(')')
        self.ast._define(
            ['value'],
            []
        )

    @tatsumasu('IfCondition')
    @leftrec
    def _if_condition_(self):  # noqa
        with self._choice():
            with self._option():
                self._if_condition_()
                self.name_last_node('se')

                def block1():
                    self._hspace_()
                self._closure(block1)
                self._OR_()

                def block2():
                    self._hspace_()
                self._closure(block2)
                self._and_condition_()
                self.name_last_node('other')
            with self._option():
                self._and_condition_()
                self.name_last_node('single')
            self._error('no available options')
        self.ast._define(
            ['other', 'se', 'single'],
            []
        )

    @tatsumasu('AndCondition')
    @leftrec
    def _and_condition_(self):  # noqa
        with self._choice():
            with self._option():
                self._and_condition_()
                self.name_last_node('se')

                def block1():
                    self._hspace_()
                self._closure(block1)
                self._AND_()

                def block2():
                    self._hspace_()
                self._closure(block2)
                self._atom_condition_()
                self.name_last_node('other')
            with self._option():
                self._atom_condition_()
                self.name_last_node('atom')
            self._error('no available options')
        self.ast._define(
            ['atom', 'other', 'se'],
            []
        )

    @tatsumasu('AtomCondition')
    def _atom_condition_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('(')

                def block0():
                    self._hspace_()
                self._closure(block0)
                self._if_condition_()
                self.name_last_node('p')

                def block2():
                    self._hspace_()
                self._closure(block2)
                self._token(')')
            with self._option():
                self._not_equal_()
                self.name_last_node('cond')
            with self._option():
                self._equal_()
                self.name_last_node('cond')
            with self._option():
                self._in_()
                self.name_last_node('cond')
            with self._option():
                self._not_in_()
                self.name_last_node('cond')
            with self._option():
                self._greater_()
                self.name_last_node('cond')
            with self._option():
                self._greater_equal_()
                self.name_last_node('cond')
            with self._option():
                self._less_()
                self.name_last_node('cond')
            with self._option():
                self._less_equal_()
                self.name_last_node('cond')
            self._error('no available options')
        self.ast._define(
            ['cond', 'p'],
            []
        )

    @tatsumasu('InCondition')
    def _in_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('(')

                def block0():
                    self._hspace_()
                self._closure(block0)
                self._expression_()
                self.add_last_node_to_name('left')

                def block2():
                    self._hspace_()
                self._closure(block2)

                def block3():
                    self._token(',')

                    def block4():
                        self._hspace_()
                    self._closure(block4)
                    self._expression_()
                    self.add_last_node_to_name('left')

                    def block6():
                        self._hspace_()
                    self._closure(block6)
                self._closure(block3)
                self._token(')')

                def block7():
                    self._hspace_()
                self._closure(block7)
                self._IN_()

                def block8():
                    self._hspace_()
                self._closure(block8)
                with self._group():
                    with self._choice():
                        with self._option():
                            self._function_operator_()
                        with self._option():
                            self._identifier_()
                        self._error('no available options')
                self.name_last_node('right')
            with self._option():
                self._expression_()
                self.add_last_node_to_name('left')

                def block12():
                    self._hspace_()
                self._closure(block12)
                self._IN_()

                def block13():
                    self._hspace_()
                self._closure(block13)
                with self._group():
                    with self._choice():
                        with self._option():
                            self._function_operator_()
                        with self._option():
                            self._identifier_()
                        self._error('no available options')
                self.name_last_node('right')
            self._error('no available options')
        self.ast._define(
            ['right'],
            ['left']
        )

    @tatsumasu('NotInCondition')
    def _not_in_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('(')

                def block0():
                    self._hspace_()
                self._closure(block0)
                self._expression_()
                self.add_last_node_to_name('left')

                def block2():
                    self._hspace_()
                self._closure(block2)

                def block3():
                    self._token(',')

                    def block4():
                        self._hspace_()
                    self._closure(block4)
                    self._expression_()
                    self.add_last_node_to_name('left')

                    def block6():
                        self._hspace_()
                    self._closure(block6)
                self._closure(block3)
                self._token(')')

                def block7():
                    self._hspace_()
                self._closure(block7)
                self._token('‚àâ')

                def block8():
                    self._hspace_()
                self._closure(block8)
                with self._group():
                    with self._choice():
                        with self._option():
                            self._function_operator_()
                        with self._option():
                            self._identifier_()
                        self._error('no available options')
                self.name_last_node('right')
            with self._option():
                self._expression_()
                self.add_last_node_to_name('left')

                def block12():
                    self._hspace_()
                self._closure(block12)
                self._token('‚àâ')

                def block13():
                    self._hspace_()
                self._closure(block13)
                with self._group():
                    with self._choice():
                        with self._option():
                            self._function_operator_()
                        with self._option():
                            self._identifier_()
                        self._error('no available options')
                self.name_last_node('right')
            self._error('no available options')
        self.ast._define(
            ['right'],
            ['left']
        )

    @tatsumasu('NeCondition')
    def _not_equal_(self):  # noqa
        self._expression_()
        self.name_last_node('left')

        def block1():
            self._hspace_()
        self._closure(block1)
        with self._group():
            with self._choice():
                with self._option():
                    self._token('‚â†')
                with self._option():
                    self._token('!=')
                self._error('no available options')
        self.name_last_node('op')

        def block4():
            self._hspace_()
        self._closure(block4)
        self._expression_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'op', 'right'],
            []
        )

    @tatsumasu('EqCondition')
    def _equal_(self):  # noqa
        self._expression_()
        self.name_last_node('left')

        def block1():
            self._hspace_()
        self._closure(block1)
        with self._group():
            with self._choice():
                with self._option():
                    self._token('==')
                with self._option():
                    self._token('=')
                self._error('no available options')
        self.name_last_node('op')

        def block4():
            self._hspace_()
        self._closure(block4)
        self._expression_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'op', 'right'],
            []
        )

    @tatsumasu('GreaterCondition')
    def _greater_(self):  # noqa
        self._expression_()
        self.name_last_node('left')

        def block1():
            self._hspace_()
        self._closure(block1)
        self._token('>')
        self.name_last_node('op')

        def block3():
            self._hspace_()
        self._closure(block3)
        self._expression_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'op', 'right'],
            []
        )

    @tatsumasu('GreaterEqualCondition')
    def _greater_equal_(self):  # noqa
        self._expression_()
        self.name_last_node('left')

        def block1():
            self._hspace_()
        self._closure(block1)
        with self._group():
            with self._choice():
                with self._option():
                    self._token('>=')
                with self._option():
                    self._token('‚â•')
                with self._option():
                    self._token('‚©æ')
                self._error('no available options')
        self.name_last_node('op')

        def block4():
            self._hspace_()
        self._closure(block4)
        self._expression_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'op', 'right'],
            []
        )

    @tatsumasu('LessCondition')
    def _less_(self):  # noqa
        self._expression_()
        self.name_last_node('left')

        def block1():
            self._hspace_()
        self._closure(block1)
        self._token('<')
        self.name_last_node('op')

        def block3():
            self._hspace_()
        self._closure(block3)
        self._expression_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'op', 'right'],
            []
        )

    @tatsumasu('LessEqualCondition')
    def _less_equal_(self):  # noqa
        self._expression_()
        self.name_last_node('left')

        def block1():
            self._hspace_()
        self._closure(block1)
        with self._group():
            with self._choice():
                with self._option():
                    self._token('<=')
                with self._option():
                    self._token('‚â§')
                with self._option():
                    self._token('‚©Ω')
                self._error('no available options')
        self.name_last_node('op')

        def block4():
            self._hspace_()
        self._closure(block4)
        self._expression_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'op', 'right'],
            []
        )

    @tatsumasu('ArithExpression')
    @leftrec
    def _arithmetic_expression_(self):  # noqa
        with self._choice():
            with self._option():
                self._arithmetic_addition_()
                self.name_last_node('value')
            with self._option():
                self._arithmetic_subtraction_()
                self.name_last_node('value')
            with self._option():
                with self._optional():
                    self._token('-')
                self.name_last_node('sign')
                self._arithmetic_term_()
                self.name_last_node('value')
            self._error('no available options')
        self.ast._define(
            ['sign', 'value'],
            []
        )

    @tatsumasu('ArithAdd')
    @nomemo
    def _arithmetic_addition_(self):  # noqa
        self._arithmetic_expression_()
        self.name_last_node('left')

        def block1():
            self._hspace_()
        self._closure(block1)
        self._token('+')
        self.name_last_node('op')

        def block3():
            self._hspace_()
        self._closure(block3)
        self._arithmetic_term_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'op', 'right'],
            []
        )

    @tatsumasu('ArithSubtract')
    @nomemo
    def _arithmetic_subtraction_(self):  # noqa
        self._arithmetic_expression_()
        self.name_last_node('left')

        def block1():
            self._hspace_()
        self._closure(block1)
        self._token('-')
        self.name_last_node('op')

        def block3():
            self._hspace_()
        self._closure(block3)
        self._arithmetic_term_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'op', 'right'],
            []
        )

    @tatsumasu()
    @leftrec
    def _arithmetic_term_(self):  # noqa
        with self._choice():
            with self._option():
                self._arithmetic_multiplication_()
            with self._option():
                self._arithmetic_division_()
            with self._option():
                self._arithmetic_factor_()
            self._error('no available options')

    @tatsumasu('ArithMultiply')
    @nomemo
    def _arithmetic_multiplication_(self):  # noqa
        with self._choice():
            with self._option():
                self._arithmetic_term_()
                self.name_last_node('left')

                def block1():
                    self._hspace_()
                self._closure(block1)
                self._token('‚ãÖ')
                self.name_last_node('op')

                def block3():
                    self._hspace_()
                self._closure(block3)
                self._arithmetic_factor_()
                self.name_last_node('right')
            with self._option():
                self._arithmetic_term_()
                self.name_last_node('left')

                def block6():
                    self._hspace_()
                self._closure(block6)
                self._arithmetic_factor_()
                self.name_last_node('right')
            self._error('no available options')
        self.ast._define(
            ['left', 'op', 'right'],
            []
        )

    @tatsumasu('ArithDivide')
    @nomemo
    def _arithmetic_division_(self):  # noqa
        self._arithmetic_term_()
        self.name_last_node('left')

        def block1():
            self._hspace_()
        self._closure(block1)
        with self._group():
            with self._choice():
                with self._option():
                    self._token('/')
                with self._option():
                    self._token('√∑')
                self._error('no available options')
        self.name_last_node('op')

        def block4():
            self._hspace_()
        self._closure(block4)
        self._arithmetic_factor_()
        self.name_last_node('right')
        self.ast._define(
            ['left', 'op', 'right'],
            []
        )

    @tatsumasu('ArithFactor')
    def _arithmetic_factor_(self):  # noqa
        with self._choice():
            with self._option():
                self._arithmetic_subexpression_()
                self.name_last_node('sub')
            with self._option():
                self._size_op_()
                self.name_last_node('size')
            with self._option():
                self._identifier_()
                self.name_last_node('id0')
            with self._option():
                self._number_()
                self.name_last_node('num')
            self._error('no available options')
        self.ast._define(
            ['id0', 'num', 'size', 'sub'],
            []
        )

    @tatsumasu('ArithSubexpression')
    def _arithmetic_subexpression_(self):  # noqa
        self._token('(')

        def block0():
            self._hspace_()
        self._closure(block0)
        self._arithmetic_expression_()
        self.name_last_node('value')

        def block2():
            self._hspace_()
        self._closure(block2)
        self._token(')')
        self.ast._define(
            ['value'],
            []
        )

    @tatsumasu('MatrixType')
    def _matrix_type_(self):  # noqa
        with self._choice():
            with self._option():
                self._pattern('matrix')

                def block0():
                    self._hspace_()
                self._closure(block0)
                self._token('(')

                def block1():
                    self._hspace_()
                self._closure(block1)
                self._dimension_()
                self.name_last_node('id1')

                def block3():
                    self._hspace_()
                self._closure(block3)
                self._token(',')

                def block4():
                    self._hspace_()
                self._closure(block4)
                self._dimension_()
                self.name_last_node('id2')

                def block6():
                    self._hspace_()
                self._closure(block6)
                self._token(')')

                def block7():

                    def block8():
                        self._hspace_()
                    self._positive_closure(block8)
                    self._matrix_attribute_()
                    self.add_last_node_to_name('attr')
                self._closure(block7)
            with self._option():
                self._pattern('[‚Ñù‚Ñ§]')
                self.name_last_node('type')

                def block11():
                    self._hspace_()
                self._closure(block11)
                self._token('^')

                def block12():
                    self._hspace_()
                self._closure(block12)
                self._token('(')

                def block13():
                    self._hspace_()
                self._closure(block13)
                self._dimension_()
                self.name_last_node('id1')

                def block15():
                    self._hspace_()
                self._closure(block15)
                self._token('√ó')

                def block16():
                    self._hspace_()
                self._closure(block16)
                self._dimension_()
                self.name_last_node('id2')

                def block18():
                    self._hspace_()
                self._closure(block18)
                self._token(')')

                def block19():

                    def block20():
                        self._hspace_()
                    self._positive_closure(block20)
                    self._matrix_attribute_()
                    self.add_last_node_to_name('attr')
                self._closure(block19)
            self._error('no available options')
        self.ast._define(
            ['id1', 'id2', 'type'],
            ['attr']
        )

    @tatsumasu()
    def _matrix_attribute_(self):  # noqa
        self._SPARSE_()

    @tatsumasu('VectorType')
    def _vector_type_(self):  # noqa
        with self._choice():
            with self._option():
                self._pattern('vector')

                def block0():
                    self._hspace_()
                self._closure(block0)
                self._token('(')

                def block1():
                    self._hspace_()
                self._closure(block1)
                self._dimension_()
                self.name_last_node('id1')

                def block3():
                    self._hspace_()
                self._closure(block3)
                self._token(')')
            with self._option():
                self._pattern('[‚Ñù‚Ñ§]')
                self.name_last_node('type')

                def block5():
                    self._hspace_()
                self._closure(block5)
                self._token('^')

                def block6():
                    self._hspace_()
                self._closure(block6)
                self._token('(')

                def block7():
                    self._hspace_()
                self._closure(block7)
                self._dimension_()
                self.name_last_node('id1')

                def block9():
                    self._hspace_()
                self._closure(block9)
                self._token(')')
            with self._option():
                self._pattern('[‚Ñù‚Ñ§]')
                self.name_last_node('type')

                def block11():
                    self._hspace_()
                self._closure(block11)
                self._token('^')

                def block12():
                    self._hspace_()
                self._closure(block12)
                self._dimension_()
                self.name_last_node('id1')
            with self._option():
                self._pattern('[‚Ñù‚Ñ§]')
                self.name_last_node('type')
                self._sup_integer_()
                self.name_last_node('id1')
            self._error('no available options')
        self.ast._define(
            ['id1', 'type'],
            []
        )

    @tatsumasu('ScalarType')
    def _scalar_type_(self):  # noqa
        with self._choice():
            with self._option():
                self._pattern('scalar')
            with self._option():
                self._pattern('‚Ñù')
            with self._option():
                self._pattern('‚Ñ§')
                self.name_last_node('z')
            self._error('no available options')
        self.ast._define(
            ['z'],
            []
        )

    @tatsumasu('SetType')
    def _set_type_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('{')

                def block0():
                    self._hspace_()
                self._closure(block0)
                self._pattern('[‚Ñù‚Ñ§]')
                self.add_last_node_to_name('type')

                def block2():
                    self._hspace_()
                self._closure(block2)

                def block3():
                    self._token('√ó')

                    def block4():
                        self._hspace_()
                    self._closure(block4)
                    self._pattern('[‚Ñù‚Ñ§]')
                    self.add_last_node_to_name('type')

                    def block6():
                        self._hspace_()
                    self._closure(block6)
                self._closure(block3)
                self._token('}')
            with self._option():
                self._token('{')

                def block7():
                    self._hspace_()
                self._closure(block7)
                self._pattern('[‚Ñù‚Ñ§]')
                self.name_last_node('type1')

                def block9():
                    self._hspace_()
                self._closure(block9)
                self._token('^')

                def block10():
                    self._hspace_()
                self._closure(block10)
                with self._group():
                    self._integer_()
                self.name_last_node('cnt')

                def block12():
                    self._hspace_()
                self._closure(block12)
                self._token('}')
            with self._option():
                self._token('{')

                def block13():
                    self._hspace_()
                self._closure(block13)
                self._pattern('[‚Ñù‚Ñ§]')
                self.name_last_node('type2')
                with self._optional():
                    self._sup_integer_()
                self.name_last_node('cnt')

                def block16():
                    self._hspace_()
                self._closure(block16)
                self._token('}')
            with self._option():
                self._token('{')

                def block17():
                    self._hspace_()
                self._closure(block17)
                self._params_type_()
                self.add_last_node_to_name('sub_types')

                def block19():
                    self._hspace_()
                self._closure(block19)

                def block20():
                    self._token('√ó')

                    def block21():
                        self._hspace_()
                    self._closure(block21)
                    self._params_type_()
                    self.add_last_node_to_name('sub_types')

                    def block23():
                        self._hspace_()
                    self._closure(block23)
                self._closure(block20)
                self._token('}')
            self._error('no available options')
        self.ast._define(
            ['cnt', 'type1', 'type2'],
            ['sub_types', 'type']
        )

    @tatsumasu()
    def _dimension_(self):  # noqa
        self._arithmetic_expression_()

    @tatsumasu()
    def _la_type_(self):  # noqa
        with self._choice():
            with self._option():
                self._function_type_()
            with self._option():
                self._mapping_type_()
            with self._option():
                self._matrix_type_()
            with self._option():
                self._vector_type_()
            with self._option():
                self._set_type_()
            with self._option():
                self._scalar_type_()
            self._error('no available options')

    @tatsumasu()
    def _params_type_(self):  # noqa
        with self._choice():
            with self._option():
                self._matrix_type_()
            with self._option():
                self._vector_type_()
            with self._option():
                self._scalar_type_()
            with self._option():
                self._set_type_()
            self._error('no available options')

    @tatsumasu('FunctionType')
    def _function_type_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._params_type_()
                        self.add_last_node_to_name('params')

                        def block1():

                            def block2():
                                self._hspace_()
                            self._closure(block2)
                            self._params_separator_()
                            self.add_last_node_to_name('separators')

                            def block4():
                                self._hspace_()
                            self._closure(block4)
                            self._params_type_()
                            self.add_last_node_to_name('params')
                        self._closure(block1)
                with self._option():
                    self._token('‚àÖ')
                    self.name_last_node('empty')
                with self._option():
                    self._token('{')

                    def block7():
                        self._hspace_()
                    self._closure(block7)
                    self._token('}')
                self._error('no available options')

        def block9():
            self._hspace_()
        self._closure(block9)
        with self._group():
            with self._choice():
                with self._option():
                    self._token('‚Üí')
                with self._option():
                    self._token('->')
                self._error('no available options')

        def block11():
            self._hspace_()
        self._closure(block11)
        self._params_type_()
        self.add_last_node_to_name('ret')

        def block13():

            def block14():
                self._hspace_()
            self._closure(block14)
            self._params_separator_()
            self.add_last_node_to_name('ret_separators')

            def block16():
                self._hspace_()
            self._closure(block16)
            self._params_type_()
            self.add_last_node_to_name('ret')
        self._closure(block13)
        self.ast._define(
            ['empty'],
            ['params', 'ret', 'ret_separators', 'separators']
        )

    @tatsumasu('MappingType')
    def _mapping_type_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            with self._group():
                                self._identifier_()
                                self.add_last_node_to_name('params')

                                def block1():

                                    def block2():
                                        self._hspace_()
                                    self._closure(block2)
                                    self._params_separator_()
                                    self.add_last_node_to_name('separators')

                                    def block4():
                                        self._hspace_()
                                    self._closure(block4)
                                    self._identifier_()
                                    self.add_last_node_to_name('params')
                                self._closure(block1)
                        with self._option():
                            self._token('‚àÖ')
                            self.name_last_node('empty')
                        with self._option():
                            self._token('{')

                            def block7():
                                self._hspace_()
                            self._closure(block7)
                            self._token('}')
                        self._error('no available options')

                def block9():
                    self._hspace_()
                self._closure(block9)
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('‚Üí')
                        with self._option():
                            self._token('->')
                        self._error('no available options')

                def block11():
                    self._hspace_()
                self._closure(block11)
                self._params_type_()
                self.add_last_node_to_name('ret_type')

                def block13():

                    def block14():
                        self._hspace_()
                    self._closure(block14)
                    self._params_separator_()
                    self.add_last_node_to_name('ret_separators')

                    def block16():
                        self._hspace_()
                    self._closure(block16)
                    self._params_type_()
                    self.add_last_node_to_name('ret_type')
                self._closure(block13)
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            with self._group():
                                self._identifier_()
                                self.add_last_node_to_name('params')

                                def block19():

                                    def block20():
                                        self._hspace_()
                                    self._closure(block20)
                                    self._params_separator_()
                                    self.add_last_node_to_name('separators')

                                    def block22():
                                        self._hspace_()
                                    self._closure(block22)
                                    self._identifier_()
                                    self.add_last_node_to_name('params')
                                self._closure(block19)
                        with self._option():
                            self._token('‚àÖ')
                            self.name_last_node('empty')
                        with self._option():
                            self._token('{')

                            def block25():
                                self._hspace_()
                            self._closure(block25)
                            self._token('}')
                        self._error('no available options')

                def block27():
                    self._hspace_()
                self._closure(block27)
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('‚Üí')
                        with self._option():
                            self._token('->')
                        self._error('no available options')

                def block29():
                    self._hspace_()
                self._closure(block29)
                self._identifier_()
                self.add_last_node_to_name('ret')

                def block31():

                    def block32():
                        self._hspace_()
                    self._closure(block32)
                    self._params_separator_()
                    self.add_last_node_to_name('ret_separators')

                    def block34():
                        self._hspace_()
                    self._closure(block34)
                    self._identifier_()
                    self.add_last_node_to_name('ret')
                self._closure(block31)
            self._error('no available options')
        self.ast._define(
            ['empty'],
            ['params', 'ret', 'ret_separators', 'ret_type', 'separators']
        )

    @tatsumasu('Integer')
    def _integer_(self):  # noqa

        def block1():
            self._digit_()
        self._positive_closure(block1)
        self.name_last_node('value')
        self.ast._define(
            ['value'],
            []
        )

    @tatsumasu('SupInteger')
    def _sup_integer_(self):  # noqa

        def block1():
            self._pattern('[\\u2070\\u00B9\\u00B2\\u00B3\\u2074-\\u2079]')
        self._positive_closure(block1)
        self.name_last_node('value')
        self.ast._define(
            ['value'],
            []
        )

    @tatsumasu('SubInteger')
    def _sub_integer_(self):  # noqa

        def block1():
            self._pattern('[\\u2080-\\u2089]')
        self._positive_closure(block1)
        self.name_last_node('value')
        self.ast._define(
            ['value'],
            []
        )

    @tatsumasu()
    def _digit_(self):  # noqa
        self._pattern('\\d')

    @tatsumasu()
    def _func_id_(self):  # noqa
        self._identifier_alone_()

        def block0():
            self._token('_')
            self._identifier_alone_()
        self._closure(block0)

    @tatsumasu('IdentifierAlone')
    def _identifier_alone_(self):  # noqa
        with self._ifnot():
            self._KEYWORDS_()
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._pattern('[A-Za-z\\p{Ll}\\p{Lu}\\p{Lo}](?![\\u0308\\u0307])\\p{M}*([A-Z0-9a-z\\p{Ll}\\p{Lu}\\p{Lo}](?![\\u0308\\u0307])\\p{M}*)*')
                            with self._option():
                                self._pattern('[A-Za-z\\p{Ll}\\p{Lu}\\p{Lo}]\\p{M}*(?=[\\u0308\\u0307])([A-Z0-9a-z\\p{Ll}\\p{Lu}\\p{Lo}]\\p{M}*(?=[\\u0308\\u0307]))*')
                            self._error('no available options')
                    self.name_last_node('value')
                with self._option():
                    self._token('`')
                    self._pattern('[^`]*')
                    self.name_last_node('id')
                    self._token('`')
                self._error('no available options')
        self.ast._define(
            ['id', 'value'],
            []
        )

    @tatsumasu()
    def _identifier_(self):  # noqa
        with self._choice():
            with self._option():
                self._identifier_with_multi_subscript_()
            with self._option():
                self._identifier_with_subscript_()
            with self._option():
                self._identifier_alone_()
            self._error('no available options')

    @tatsumasu('IdentifierSubscript')
    def _identifier_with_multi_subscript_(self):  # noqa
        self._identifier_alone_()
        self.name_last_node('left')

        def block1():
            self._token('_')
            self._identifier_alone_()
            self.add_last_node_to_name('right')
        self._positive_closure(block1)
        with self._group():
            with self._choice():
                with self._option():

                    def block3():
                        with self._choice():
                            with self._option():
                                with self._group():
                                    self._token(',')
                                    self._token('*')
                                    self.add_last_node_to_name('right')
                            with self._option():
                                with self._group():

                                    def block5():
                                        self._token(',')
                                    self._closure(block5)
                                    with self._group():
                                        with self._choice():
                                            with self._option():
                                                self._integer_()
                                            with self._option():
                                                self._identifier_alone_()
                                            self._error('no available options')
                                    self.add_last_node_to_name('right')
                            self._error('no available options')
                    self._closure(block3)
                with self._option():

                    def block9():
                        with self._choice():
                            with self._option():
                                with self._group():
                                    self._token(',')
                                    self._token('*')
                                    self.add_last_node_to_name('right')
                            with self._option():
                                with self._group():

                                    def block11():
                                        self._token(',')
                                    self._closure(block11)
                                    with self._group():
                                        self._sub_integer_()
                                    self.add_last_node_to_name('right')
                            self._error('no available options')
                    self._closure(block9)
                self._error('no available options')
        self.ast._define(
            ['left'],
            ['right']
        )

    @tatsumasu('Function')
    def _function_operator_(self):  # noqa
        with self._choice():
            with self._option():
                self._func_id_()
                self.name_last_node('name')

                def block1():
                    self._PRIME_()
                    self.add_last_node_to_name('order')
                self._positive_closure(block1)

                def block3():
                    self._token('(')
                    self.name_last_node('p')

                    def block5():

                        def block6():
                            self._hspace_()
                        self._closure(block6)
                        self._expression_()
                        self.add_last_node_to_name('params')

                        def block8():

                            def block9():
                                self._hspace_()
                            self._closure(block9)
                            self._params_separator_()
                            self.add_last_node_to_name('separators')

                            def block11():
                                self._hspace_()
                            self._closure(block11)
                            self._expression_()
                            self.add_last_node_to_name('params')
                        self._closure(block8)
                    self._closure(block5)

                    def block13():
                        self._hspace_()
                    self._closure(block13)
                    self._token(')')
                self._closure(block3)
            with self._option():
                self._func_id_()
                self.name_last_node('name')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._UDDOT_()
                            self.name_last_node('d')
                        with self._option():
                            self._UDOT_()
                            self.name_last_node('s')
                        self._error('no available options')

                def block18():
                    self._token('(')
                    self.name_last_node('p')

                    def block20():

                        def block21():
                            self._hspace_()
                        self._closure(block21)
                        self._expression_()
                        self.add_last_node_to_name('params')

                        def block23():

                            def block24():
                                self._hspace_()
                            self._closure(block24)
                            self._params_separator_()
                            self.add_last_node_to_name('separators')

                            def block26():
                                self._hspace_()
                            self._closure(block26)
                            self._expression_()
                            self.add_last_node_to_name('params')
                        self._closure(block23)
                    self._closure(block20)

                    def block28():
                        self._hspace_()
                    self._closure(block28)
                    self._token(')')
                self._closure(block18)
            with self._option():
                self._func_id_()
                self.name_last_node('name')
                self._token('(')
                self.name_last_node('p')

                def block31():

                    def block32():
                        self._hspace_()
                    self._closure(block32)
                    self._expression_()
                    self.add_last_node_to_name('params')

                    def block34():

                        def block35():
                            self._hspace_()
                        self._closure(block35)
                        self._params_separator_()
                        self.add_last_node_to_name('separators')

                        def block37():
                            self._hspace_()
                        self._closure(block37)
                        self._expression_()
                        self.add_last_node_to_name('params')
                    self._closure(block34)
                self._closure(block31)

                def block39():
                    self._hspace_()
                self._closure(block39)
                self._token(')')
            self._error('no available options')
        self.ast._define(
            ['d', 'name', 'p', 's'],
            ['order', 'params', 'separators']
        )


class grammarinitSemantics(object):
    def start(self, ast):  # noqa
        return ast

    def TRACE(self, ast):  # noqa
        return ast

    def TR(self, ast):  # noqa
        return ast

    def VEC(self, ast):  # noqa
        return ast

    def DIAG(self, ast):  # noqa
        return ast

    def INV(self, ast):  # noqa
        return ast

    def DET(self, ast):  # noqa
        return ast

    def RANK(self, ast):  # noqa
        return ast

    def NULL(self, ast):  # noqa
        return ast

    def ORTH(self, ast):  # noqa
        return ast

    def QR(self, ast):  # noqa
        return ast

    def DERIVATIVE(self, ast):  # noqa
        return ast

    def PARTIAL(self, ast):  # noqa
        return ast

    def WHERE(self, ast):  # noqa
        return ast

    def GIVEN(self, ast):  # noqa
        return ast

    def SUM(self, ast):  # noqa
        return ast

    def MIN(self, ast):  # noqa
        return ast

    def MAX(self, ast):  # noqa
        return ast

    def ARGMIN(self, ast):  # noqa
        return ast

    def ARGMAX(self, ast):  # noqa
        return ast

    def INT(self, ast):  # noqa
        return ast

    def SPARSE(self, ast):  # noqa
        return ast

    def IF(self, ast):  # noqa
        return ast

    def OTHERWISE(self, ast):  # noqa
        return ast

    def IN(self, ast):  # noqa
        return ast

    def SIN(self, ast):  # noqa
        return ast

    def ASIN(self, ast):  # noqa
        return ast

    def ARCSIN(self, ast):  # noqa
        return ast

    def COS(self, ast):  # noqa
        return ast

    def ACOS(self, ast):  # noqa
        return ast

    def ARCCOS(self, ast):  # noqa
        return ast

    def TAN(self, ast):  # noqa
        return ast

    def ATAN(self, ast):  # noqa
        return ast

    def ARCTAN(self, ast):  # noqa
        return ast

    def SINH(self, ast):  # noqa
        return ast

    def ASINH(self, ast):  # noqa
        return ast

    def ARSINH(self, ast):  # noqa
        return ast

    def COSH(self, ast):  # noqa
        return ast

    def ACOSH(self, ast):  # noqa
        return ast

    def ARCOSH(self, ast):  # noqa
        return ast

    def TANH(self, ast):  # noqa
        return ast

    def ATANH(self, ast):  # noqa
        return ast

    def ARTANH(self, ast):  # noqa
        return ast

    def COT(self, ast):  # noqa
        return ast

    def SEC(self, ast):  # noqa
        return ast

    def CSC(self, ast):  # noqa
        return ast

    def ATAN2(self, ast):  # noqa
        return ast

    def EXP(self, ast):  # noqa
        return ast

    def LOG(self, ast):  # noqa
        return ast

    def LN(self, ast):  # noqa
        return ast

    def SQRT(self, ast):  # noqa
        return ast

    def SUBJECT_TO(self, ast):  # noqa
        return ast

    def FROM(self, ast):  # noqa
        return ast

    def PI(self, ast):  # noqa
        return ast

    def WITH(self, ast):  # noqa
        return ast

    def INITIAL(self, ast):  # noqa
        return ast

    def AND(self, ast):  # noqa
        return ast

    def OR(self, ast):  # noqa
        return ast

    def DELTA(self, ast):  # noqa
        return ast

    def NABLA(self, ast):  # noqa
        return ast

    def PRIME(self, ast):  # noqa
        return ast

    def UDOT(self, ast):  # noqa
        return ast

    def UDDOT(self, ast):  # noqa
        return ast

    def SOLVE(self, ast):  # noqa
        return ast

    def SUBSET(self, ast):  # noqa
        return ast

    def AS(self, ast):  # noqa
        return ast

    def POUND(self, ast):  # noqa
        return ast

    def BUILTIN_KEYWORDS(self, ast):  # noqa
        return ast

    def exponent(self, ast):  # noqa
        return ast

    def mantissa(self, ast):  # noqa
        return ast

    def floating_point(self, ast):  # noqa
        return ast

    def double(self, ast):  # noqa
        return ast

    def fraction(self, ast):  # noqa
        return ast

    def number(self, ast):  # noqa
        return ast

    def operations(self, ast):  # noqa
        return ast

    def addition(self, ast):  # noqa
        return ast

    def subtraction(self, ast):  # noqa
        return ast

    def add_sub_operator(self, ast):  # noqa
        return ast

    def multiplication(self, ast):  # noqa
        return ast

    def division(self, ast):  # noqa
        return ast

    def derivative(self, ast):  # noqa
        return ast

    def partial(self, ast):  # noqa
        return ast

    def divergence(self, ast):  # noqa
        return ast

    def gradient(self, ast):  # noqa
        return ast

    def laplacian(self, ast):  # noqa
        return ast

    def power_operator(self, ast):  # noqa
        return ast

    def solver_operator(self, ast):  # noqa
        return ast

    def sum_operator(self, ast):  # noqa
        return ast

    def optimize_operator(self, ast):  # noqa
        return ast

    def multi_cond(self, ast):  # noqa
        return ast

    def integral_operator(self, ast):  # noqa
        return ast

    def domain(self, ast):  # noqa
        return ast

    def norm_operator(self, ast):  # noqa
        return ast

    def inner_product_operator(self, ast):  # noqa
        return ast

    def frobenius_product_operator(self, ast):  # noqa
        return ast

    def hadamard_product_operator(self, ast):  # noqa
        return ast

    def cross_product_operator(self, ast):  # noqa
        return ast

    def kronecker_product_operator(self, ast):  # noqa
        return ast

    def trans_operator(self, ast):  # noqa
        return ast

    def pseudoinverse_operator(self, ast):  # noqa
        return ast

    def sqrt_operator(self, ast):  # noqa
        return ast

    def predefined_built_operators(self, ast):  # noqa
        return ast

    def exp_func(self, ast):  # noqa
        return ast

    def log_func(self, ast):  # noqa
        return ast

    def ln_func(self, ast):  # noqa
        return ast

    def sqrt_func(self, ast):  # noqa
        return ast

    def matrix(self, ast):  # noqa
        return ast

    def vector(self, ast):  # noqa
        return ast

    def set(self, ast):  # noqa
        return ast

    def multi_cond_expr(self, ast):  # noqa
        return ast

    def multi_if_conditions(self, ast):  # noqa
        return ast

    def single_if_condition(self, ast):  # noqa
        return ast

    def rows(self, ast):  # noqa
        return ast

    def row(self, ast):  # noqa
        return ast

    def row_with_commas(self, ast):  # noqa
        return ast

    def expr_in_matrix(self, ast):  # noqa
        return ast

    def addition_in_matrix(self, ast):  # noqa
        return ast

    def subtraction_in_matrix(self, ast):  # noqa
        return ast

    def term_in_matrix(self, ast):  # noqa
        return ast

    def multiplication_in_matrix(self, ast):  # noqa
        return ast

    def division_in_matrix(self, ast):  # noqa
        return ast

    def number_matrix(self, ast):  # noqa
        return ast

    def factor_in_matrix(self, ast):  # noqa
        return ast

    def operations_in_matrix(self, ast):  # noqa
        return ast

    def power_in_matrix_operator(self, ast):  # noqa
        return ast

    def frobenius_product_in_matrix_operator(self, ast):  # noqa
        return ast

    def hadamard_product_in_matrix_operator(self, ast):  # noqa
        return ast

    def cross_product_in_matrix_operator(self, ast):  # noqa
        return ast

    def kronecker_product_in_matrix_operator(self, ast):  # noqa
        return ast

    def trans_in_matrix_operator(self, ast):  # noqa
        return ast

    def pseudoinverse_in_matrix_operator(self, ast):  # noqa
        return ast

    def sqrt_in_matrix_operator(self, ast):  # noqa
        return ast

    def solver_in_matrix_operator(self, ast):  # noqa
        return ast

    def sum_in_matrix_operator(self, ast):  # noqa
        return ast

    def hspace(self, ast):  # noqa
        return ast

    def line(self, ast):  # noqa
        return ast

    def lines(self, ast):  # noqa
        return ast

    def identifier_with_subscript(self, ast):  # noqa
        return ast

    def size_op(self, ast):  # noqa
        return ast

    def keyword_str(self, ast):  # noqa
        return ast

    def multi_str(self, ast):  # noqa
        return ast

    def description(self, ast):  # noqa
        return ast

    def desc_identifier(self, ast):  # noqa
        return ast

    def separator(self, ast):  # noqa
        return ast

    def separator_with_space(self, ast):  # noqa
        return ast

    def blank(self, ast):  # noqa
        return ast

    def params_separator(self, ast):  # noqa
        return ast

    def pi(self, ast):  # noqa
        return ast

    def e(self, ast):  # noqa
        return ast

    def sin_func(self, ast):  # noqa
        return ast

    def asin_func(self, ast):  # noqa
        return ast

    def arcsin_func(self, ast):  # noqa
        return ast

    def cos_func(self, ast):  # noqa
        return ast

    def acos_func(self, ast):  # noqa
        return ast

    def arccos_func(self, ast):  # noqa
        return ast

    def tan_func(self, ast):  # noqa
        return ast

    def atan_func(self, ast):  # noqa
        return ast

    def arctan_func(self, ast):  # noqa
        return ast

    def sinh_func(self, ast):  # noqa
        return ast

    def asinh_func(self, ast):  # noqa
        return ast

    def arsinh_func(self, ast):  # noqa
        return ast

    def cosh_func(self, ast):  # noqa
        return ast

    def acosh_func(self, ast):  # noqa
        return ast

    def arcosh_func(self, ast):  # noqa
        return ast

    def tanh_func(self, ast):  # noqa
        return ast

    def atanh_func(self, ast):  # noqa
        return ast

    def artanh_func(self, ast):  # noqa
        return ast

    def cot_func(self, ast):  # noqa
        return ast

    def sec_func(self, ast):  # noqa
        return ast

    def csc_func(self, ast):  # noqa
        return ast

    def atan2_func(self, ast):  # noqa
        return ast

    def trace_func(self, ast):  # noqa
        return ast

    def tr_func(self, ast):  # noqa
        return ast

    def diag_func(self, ast):  # noqa
        return ast

    def vec_func(self, ast):  # noqa
        return ast

    def det_func(self, ast):  # noqa
        return ast

    def rank_func(self, ast):  # noqa
        return ast

    def null_func(self, ast):  # noqa
        return ast

    def orth_func(self, ast):  # noqa
        return ast

    def inv_func(self, ast):  # noqa
        return ast

    def faces_of_edge_func(self, ast):  # noqa
        return ast

    def dihedral_func(self, ast):  # noqa
        return ast

    def face_normal_func(self, ast):  # noqa
        return ast

    def get_adjacent_vertices_v_func(self, ast):  # noqa
        return ast

    def get_incident_edges_v_func(self, ast):  # noqa
        return ast

    def get_incident_faces_v_func(self, ast):  # noqa
        return ast

    def get_incident_vertices_e_func(self, ast):  # noqa
        return ast

    def get_incident_faces_e_func(self, ast):  # noqa
        return ast

    def get_diamond_vertices_e_func(self, ast):  # noqa
        return ast

    def get_incident_vertices_f_func(self, ast):  # noqa
        return ast

    def get_incident_edges_f_func(self, ast):  # noqa
        return ast

    def get_adjacent_faces_f_func(self, ast):  # noqa
        return ast

    def build_vertex_vector_func(self, ast):  # noqa
        return ast

    def build_edge_vector_func(self, ast):  # noqa
        return ast

    def build_face_vector_func(self, ast):  # noqa
        return ast

    def star_func(self, ast):  # noqa
        return ast

    def closure_func(self, ast):  # noqa
        return ast

    def link_func(self, ast):  # noqa
        return ast

    def boundary_func(self, ast):  # noqa
        return ast

    def isComplex_func(self, ast):  # noqa
        return ast

    def isPureComplex_func(self, ast):  # noqa
        return ast

    def Directive(self, ast):  # noqa
        return ast

    def import_(self, ast):  # noqa
        return ast

    def import_var(self, ast):  # noqa
        return ast

    def where_conditions(self, ast):  # noqa
        return ast

    def where_condition(self, ast):  # noqa
        return ast

    def la_where_condition(self, ast):  # noqa
        return ast

    def de_where_condition(self, ast):  # noqa
        return ast

    def where_condition_terse(self, ast):  # noqa
        return ast

    def valid_block(self, ast):  # noqa
        return ast

    def params_block(self, ast):  # noqa
        return ast

    def builtin_operators(self, ast):  # noqa
        return ast

    def statements(self, ast):  # noqa
        return ast

    def statement(self, ast):  # noqa
        return ast

    def expression(self, ast):  # noqa
        return ast

    def assignment(self, ast):  # noqa
        return ast

    def general_assignment(self, ast):  # noqa
        return ast

    def de_solver(self, ast):  # noqa
        return ast

    def local_func(self, ast):  # noqa
        return ast

    def right_hand_side(self, ast):  # noqa
        return ast

    def left_hand_side(self, ast):  # noqa
        return ast

    def term(self, ast):  # noqa
        return ast

    def factor(self, ast):  # noqa
        return ast

    def sub_factor(self, ast):  # noqa
        return ast

    def constant(self, ast):  # noqa
        return ast

    def KEYWORDS(self, ast):  # noqa
        return ast

    def subexpression(self, ast):  # noqa
        return ast

    def if_condition(self, ast):  # noqa
        return ast

    def and_condition(self, ast):  # noqa
        return ast

    def atom_condition(self, ast):  # noqa
        return ast

    def in_(self, ast):  # noqa
        return ast

    def not_in(self, ast):  # noqa
        return ast

    def not_equal(self, ast):  # noqa
        return ast

    def equal(self, ast):  # noqa
        return ast

    def greater(self, ast):  # noqa
        return ast

    def greater_equal(self, ast):  # noqa
        return ast

    def less(self, ast):  # noqa
        return ast

    def less_equal(self, ast):  # noqa
        return ast

    def arithmetic_expression(self, ast):  # noqa
        return ast

    def arithmetic_addition(self, ast):  # noqa
        return ast

    def arithmetic_subtraction(self, ast):  # noqa
        return ast

    def arithmetic_term(self, ast):  # noqa
        return ast

    def arithmetic_multiplication(self, ast):  # noqa
        return ast

    def arithmetic_division(self, ast):  # noqa
        return ast

    def arithmetic_factor(self, ast):  # noqa
        return ast

    def arithmetic_subexpression(self, ast):  # noqa
        return ast

    def matrix_type(self, ast):  # noqa
        return ast

    def matrix_attribute(self, ast):  # noqa
        return ast

    def vector_type(self, ast):  # noqa
        return ast

    def scalar_type(self, ast):  # noqa
        return ast

    def set_type(self, ast):  # noqa
        return ast

    def dimension(self, ast):  # noqa
        return ast

    def la_type(self, ast):  # noqa
        return ast

    def params_type(self, ast):  # noqa
        return ast

    def function_type(self, ast):  # noqa
        return ast

    def mapping_type(self, ast):  # noqa
        return ast

    def integer(self, ast):  # noqa
        return ast

    def sup_integer(self, ast):  # noqa
        return ast

    def sub_integer(self, ast):  # noqa
        return ast

    def digit(self, ast):  # noqa
        return ast

    def func_id(self, ast):  # noqa
        return ast

    def identifier_alone(self, ast):  # noqa
        return ast

    def identifier(self, ast):  # noqa
        return ast

    def identifier_with_multi_subscript(self, ast):  # noqa
        return ast

    def function_operator(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'start'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = grammarinitParser()
    return parser.parse(text, rule_name=start, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, grammarinitParser, name='grammarinit')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.



from tatsu.objectmodel import Node
from tatsu.semantics import ModelBuilderSemantics


class ModelBase(Node):
    pass


class grammarinitModelBuilderSemantics(ModelBuilderSemantics):
    def __init__(self, context=None, types=None):
        types = [
            t for t in globals().values()
            if type(t) is type and issubclass(t, ModelBase)
        ] + (types or [])
        super(grammarinitModelBuilderSemantics, self).__init__(context=context, types=types)


class Start(ModelBase):
    vblock = None


class Exponent(ModelBase):
    exp = None
    pow = None


class Mantissa(ModelBase):
    d = None
    f = None


class Float(ModelBase):
    e = None
    m = None


class Double(ModelBase):
    exp = None
    f = None
    i = None


class Fraction(ModelBase):
    value = None


class Add(ModelBase):
    left = None
    op = None
    right = None


class Subtract(ModelBase):
    left = None
    op = None
    right = None


class AddSub(ModelBase):
    left = None
    op = None
    right = None


class Multiply(ModelBase):
    left = None
    op = None
    right = None


class Divide(ModelBase):
    left = None
    op = None
    right = None


class Derivative(ModelBase):
    f = None
    lorder = None
    lower = None
    s = None
    uorder = None
    upper = None


class Partial(ModelBase):
    f = None
    l = None
    lorder = None
    lower = None
    s = None
    uorder = None
    upper = None


class Divergence(ModelBase):
    name = None
    value = None


class Gradient(ModelBase):
    name = None
    value = None


class Laplace(ModelBase):
    name = None
    value = None


class Power(ModelBase):
    base = None
    power = None
    r = None
    t = None


class Solver(ModelBase):
    left = None
    p = None
    right = None


class Summation(ModelBase):
    cond = None
    enum = None
    exp = None
    extra = None
    id = None
    range = None
    sub = None


class Optimize(ModelBase):
    amax = None
    amin = None
    cond = None
    defs = None
    exp = None
    init = None
    max = None
    min = None


class MultiCond(ModelBase):
    cond = None
    m_cond = None


class Integral(ModelBase):
    d = None
    exp = None
    id = None
    lower = None
    upper = None


class Domain(ModelBase):
    lower = None
    upper = None


class Norm(ModelBase):
    double = None
    power = None
    single = None
    sub = None
    value = None


class InnerProduct(ModelBase):
    left = None
    right = None
    sub = None


class FroProduct(ModelBase):
    left = None
    right = None


class HadamardProduct(ModelBase):
    left = None
    right = None


class CrossProduct(ModelBase):
    left = None
    right = None


class KroneckerProduct(ModelBase):
    left = None
    right = None


class Transpose(ModelBase):
    f = None


class PseudoInverse(ModelBase):
    f = None


class Squareroot(ModelBase):
    f = None


class ExpFunc(ModelBase):
    param = None


class LogFunc(ModelBase):
    f = None
    param = None
    s = None


class LnFunc(ModelBase):
    param = None


class SqrtFunc(ModelBase):
    param = None


class Matrix(ModelBase):
    value = None


class Vector(ModelBase):
    exp = None


class Set(ModelBase):
    exp = None


class MultiCondExpr(ModelBase):
    ifs = None
    other = None


class MultiIfs(ModelBase):
    ifs = None
    value = None


class SingleIf(ModelBase):
    cond = None
    stat = None


class MatrixRows(ModelBase):
    r = None
    rs = None


class MatrixRow(ModelBase):
    exp = None
    rc = None
    value = None


class MatrixRowCommas(ModelBase):
    exp = None
    value = None


class ExpInMatrix(ModelBase):
    sign = None
    value = None


class NumMatrix(ModelBase):
    id1 = None
    id2 = None
    left = None


class Factor(ModelBase):
    c = None
    id0 = None
    m = None
    nm = None
    num = None
    op = None
    s = None
    sub = None
    v = None


class IdentifierSubscript(ModelBase):
    left = None
    right = None


class SizeOp(ModelBase):
    i = None


class IdentifierAlone(ModelBase):
    id = None
    value = None


class Pi(ModelBase):
    pass


class E(ModelBase):
    pass


class SinFunc(ModelBase):
    param = None
    power = None


class AsinFunc(ModelBase):
    name = None
    param = None
    power = None


class CosFunc(ModelBase):
    param = None
    power = None


class AcosFunc(ModelBase):
    name = None
    param = None
    power = None


class TanFunc(ModelBase):
    param = None
    power = None


class AtanFunc(ModelBase):
    name = None
    param = None
    power = None


class SinhFunc(ModelBase):
    param = None
    power = None


class AsinhFunc(ModelBase):
    name = None
    param = None
    power = None


class CoshFunc(ModelBase):
    param = None
    power = None


class AcoshFunc(ModelBase):
    name = None
    param = None
    power = None


class TanhFunc(ModelBase):
    param = None
    power = None


class AtanhFunc(ModelBase):
    name = None
    param = None
    power = None


class CotFunc(ModelBase):
    param = None
    power = None


class SecFunc(ModelBase):
    param = None
    power = None


class CscFunc(ModelBase):
    param = None
    power = None


class Atan2Func(ModelBase):
    param = None
    second = None
    separator = None


class TraceFunc(ModelBase):
    name = None
    param = None


class DiagFunc(ModelBase):
    param = None


class VecFunc(ModelBase):
    param = None


class DetFunc(ModelBase):
    param = None


class RankFunc(ModelBase):
    param = None


class NullFunc(ModelBase):
    param = None


class OrthFunc(ModelBase):
    param = None


class InvFunc(ModelBase):
    param = None


class FacesOfEdgeFunc(ModelBase):
    name = None
    params = None
    separators = None


class DihedralFunc(ModelBase):
    name = None
    params = None
    separators = None


class FaceNormalFunc(ModelBase):
    name = None
    params = None
    separators = None


class GetAdjacentVerticesVFunc(ModelBase):
    name = None
    params = None
    separators = None


class GetIncidentEdgesVFunc(ModelBase):
    name = None
    params = None
    separators = None


class GetIncidentFacesVFunc(ModelBase):
    name = None
    params = None
    separators = None


class GetIncidentVerticesEFunc(ModelBase):
    name = None
    params = None
    separators = None


class GetIncidentFacesEFunc(ModelBase):
    name = None
    params = None
    separators = None


class GetDiamondVerticesEFunc(ModelBase):
    name = None
    params = None
    separators = None


class GetIncidentVerticesFFunc(ModelBase):
    name = None
    params = None
    separators = None


class GetIncidentEdgesFFunc(ModelBase):
    name = None
    params = None
    separators = None


class GetAdjacentFacesFFunc(ModelBase):
    name = None
    params = None
    separators = None


class BuildVertexVectorFunc(ModelBase):
    name = None
    params = None
    separators = None


class BuildEdgeVectorFunc(ModelBase):
    name = None
    params = None
    separators = None


class BuildFaceVectorFunc(ModelBase):
    name = None
    params = None
    separators = None


class StarFunc(ModelBase):
    name = None
    params = None
    separators = None


class ClosureFunc(ModelBase):
    name = None
    params = None
    separators = None


class LinkFunc(ModelBase):
    name = None
    params = None
    separators = None


class BoundaryFunc(ModelBase):
    name = None
    params = None
    separators = None


class IsComplexFunc(ModelBase):
    name = None
    params = None
    separators = None


class IsPureComplexFunc(ModelBase):
    name = None
    params = None
    separators = None


class Import(ModelBase):
    names = None
    package = None
    params = None
    separators = None


class ImportVar(ModelBase):
    name = None
    r = None


class WhereConditions(ModelBase):
    value = None


class WhereCondition(ModelBase):
    desc = None
    id = None
    index = None
    type = None


class DeWhereCondition(ModelBase):
    desc = None
    id = None
    index = None
    subset = None
    type = None


class ParamsBlock(ModelBase):
    annotation = None
    conds = None


class Statements(ModelBase):
    stat = None


class Expression(ModelBase):
    sign = None
    value = None


class Assignment(ModelBase):
    left = None
    lexpr = None
    op = None
    rexpr = None
    right = None
    v = None


class GeneralAssignment(ModelBase):
    left = None
    op = None
    right = None


class DeSolver(ModelBase):
    lexpr = None
    op = None
    rexpr = None
    u = None


class LocalFunc(ModelBase):
    def_p = None
    defs = None
    expr = None
    name = None
    op = None
    params = None
    separators = None


class Subexpression(ModelBase):
    value = None


class IfCondition(ModelBase):
    other = None
    se = None
    single = None


class AndCondition(ModelBase):
    atom = None
    other = None
    se = None


class AtomCondition(ModelBase):
    cond = None
    p = None


class InCondition(ModelBase):
    left = None
    right = None


class NotInCondition(ModelBase):
    left = None
    right = None


class NeCondition(ModelBase):
    left = None
    op = None
    right = None


class EqCondition(ModelBase):
    left = None
    op = None
    right = None


class GreaterCondition(ModelBase):
    left = None
    op = None
    right = None


class GreaterEqualCondition(ModelBase):
    left = None
    op = None
    right = None


class LessCondition(ModelBase):
    left = None
    op = None
    right = None


class LessEqualCondition(ModelBase):
    left = None
    op = None
    right = None


class ArithExpression(ModelBase):
    sign = None
    value = None


class ArithAdd(ModelBase):
    left = None
    op = None
    right = None


class ArithSubtract(ModelBase):
    left = None
    op = None
    right = None


class ArithMultiply(ModelBase):
    left = None
    op = None
    right = None


class ArithDivide(ModelBase):
    left = None
    op = None
    right = None


class ArithFactor(ModelBase):
    id0 = None
    num = None
    size = None
    sub = None


class ArithSubexpression(ModelBase):
    value = None


class MatrixType(ModelBase):
    attr = None
    id1 = None
    id2 = None
    type = None


class VectorType(ModelBase):
    id1 = None
    type = None


class ScalarType(ModelBase):
    z = None


class SetType(ModelBase):
    cnt = None
    sub_types = None
    type = None
    type1 = None
    type2 = None


class FunctionType(ModelBase):
    empty = None
    params = None
    ret = None
    ret_separators = None
    separators = None


class MappingType(ModelBase):
    empty = None
    params = None
    ret = None
    ret_separators = None
    ret_type = None
    separators = None


class Integer(ModelBase):
    value = None


class SupInteger(ModelBase):
    value = None


class SubInteger(ModelBase):
    value = None


class Function(ModelBase):
    d = None
    name = None
    order = None
    p = None
    params = None
    s = None
    separators = None
